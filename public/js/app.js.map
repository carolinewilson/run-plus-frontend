{"version":3,"sources":["js/app.js","js/controllers/auth.js","js/controllers/day.js","js/models/day.js","js/directives/daysList.js","js/directives/googleMap.js","js/controllers/main.js","js/controllers/plan.js","js/router.js","js/controllers/setup.js","js/controllers/strava.js","js/services/stravaService.js","js/models/user.js","js/models/userPlan.js","js/controllers/users.js","js/controllers/week.js"],"names":["Auth","$authProvider","API_URL","loginUrl","signupUrl","tokenPrefix","oauth2","name","url","clientId","redirectUri","window","location","origin","authorizationEndpoint","RegisterController","$auth","$state","$window","submit","signup","register","user","then","res","localStorage","setItem","data","token","go","this","LoginController","login","credentials","user_plans","forEach","plan","active","activePlans","DaysIndexController","UserPlan","daysIndex","get","params","DaysShowController","Day","StravaService","markDone","daysShow","day","completed","update","dayId","planId","id","stravaId","accessToken","getItem","stravaActivityId","activityShow","successResponse","stravaData","errorResponse","console","log","$resource","method","daysList","restrict","replace","templateUrl","scope","days","googleMap","template","link","$scope","element","$watch","map","google","maps","Map","center","lat","lng","zoom","disableDefaultUI","zoomControl","scaleControl","scrollwheel","run","Polyline","path","geodesic","strokeColor","strokeOpacity","strokeWeight","setMap","MainController","User","$location","$anchorScroll","getUserId","userId","getPayload","logout","main","moment","hash","isLoggedIn","isAuthenticated","hasActivePlan","uiRouterState","hasStrava","currentUser","all","activePlan","today","format","startDate","start_date","planStarted","user_days","date","PlansIndexController","plansIndex","PlansShowController","plansShow","totalWorkouts","totalMiles","completedWorkouts","completedMiles","labels","series","targetData","actualData","colors","start","end","end_date","status","numWeeks","length","i","push","targetMiles","actualMiles","week","exercise","miles","currentWeek","Math","floor","PlansEditController","endPlan","plansEdit","deletePlan","remove","PlansNewController","plansNew","userPlans","Router","$stateProvider","$urlRouterProvider","state","controller","otherwise","SetupController","create","save","setupPlan","Date","add","StravaIndexController","$http","hasStravaToken","getStravaToken","matchUserDays","_loop","userDayIdx","stravaIndex","userDays","findIndex","userDay","splice","init","query","user_id","$promise","activityIndex","allActivities","completedDays","filter","catch","err","markComplete","strava_id","sync","authenticate","access_token","athlete","response","activity","distance","toFixed","elapsed_hours","elapsed_time","elapsed_minutes","elapsed_seconds","toString","slice","activityId","UsersIndexController","usersIndex","UsersShowController","userDelete","usersShow","$remove","removeItem","authenticateStrava","delete","UsersEditController","usersEdit","WeeksShowController","weeksShow","weekId","thisWeek","WeeksEditController","updatePosition","$index","index","weeksEdit","startingDay","position","savePlan","sort","a","b","angular","module","constant","config","$inject","factory","directive","service"],"mappings":"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","file":"app.js","sourcesContent":["angular.module('finalProject', ['ngResource', 'ui.router', 'satellizer','chart.js','dndLists','ngMessages','ngMaterial'])\n  .constant('API_URL', 'http://localhost:3000/api')\n  .config(Auth);\n\nAuth.$inject = ['$authProvider', 'API_URL'];\nfunction Auth($authProvider, API_URL) {\n  $authProvider.loginUrl = `${API_URL}/login`;\n  $authProvider.signupUrl = `${API_URL}/register`;\n\n  $authProvider.tokenPrefix = '';\n\n  $authProvider.oauth2({\n    name: 'strava',\n    url: `${API_URL}/oauth/strava`,\n    clientId: '15120',\n    redirectUri: window.location.origin,\n    authorizationEndpoint: 'https://www.strava.com/oauth/authorize'\n  });\n}\n","angular.module('finalProject')\n  .controller('RegisterController', RegisterController)\n  .controller('LoginController', LoginController);\n\nRegisterController.$inject = ['$auth', '$state','$window'];\nfunction RegisterController($auth, $state, $window) {\n  const register = this;\n\n  register.user = {};\n\n  function submit() {\n    $auth.signup(register.user)\n      .then((res) => {\n        $window.localStorage.setItem('token', res.data.token);\n        $state.go('setup');\n      });\n  }\n\n  register.submit = submit;\n}\n\nLoginController.$inject = ['$auth', '$state'];\nfunction LoginController($auth, $state) {\n  const login = this;\n\n  login.credentials = {};\n  login.activePlans = false;\n\n  function submit() {\n    $auth.login(login.credentials)\n      .then((res) => {\n        res.data.user.user_plans.forEach((plan) => {\n          if (plan.active) {\n            login.activePlans = true;\n          }\n        });\n\n        if (login.activePlans) {\n          $state.go('plansIndex');\n        } else {\n          $state.go('setup');\n        }\n      });\n  }\n\n  login.submit = submit;\n}\n","angular.module('finalProject')\n  .controller('DaysIndexController', DaysIndexController)\n  .controller('DaysShowController', DaysShowController);\n\nDaysIndexController.$inject = ['UserPlan', '$state'];\nfunction DaysIndexController(UserPlan, $state) {\n  const daysIndex = this;\n\n  daysIndex.plan = UserPlan.get($state.params);\n}\n\nDaysShowController.$inject = ['Day', '$state', '$window', 'StravaService'];\nfunction DaysShowController(Day, $state, $window, StravaService) {\n  const daysShow = this;\n\n  daysShow.planId = $state.params.planId;\n  daysShow.dayId = $state.params.dayId;\n\n  daysShow.day = Day.get({ id: daysShow.dayId });\n\n  if ($state.params.stravaId) {\n    // Get activities from Strava\n    const accessToken = $window.localStorage.getItem('strava_token');\n    const stravaActivityId = $state.params.stravaId;\n\n\n    StravaService\n      .activityShow(accessToken, stravaActivityId)\n      .then(\n        successResponse => {\n          daysShow.stravaData = successResponse;\n        },\n        errorResponse => {\n          console.log(errorResponse);\n        }\n      );\n  }\n\n  function markDone(){\n    daysShow.day.completed = true;\n    Day.update(daysShow.dayId, daysShow.day);\n  }\n\n  daysShow.markDone = markDone;\n}\n","angular.module('finalProject')\n  .factory('Day', Day);\n\nDay.$inject = ['$resource', 'API_URL'];\nfunction Day($resource, API_URL) {\n  return new $resource(`${API_URL}/user_days/:id`, { id: '@id'}, {\n    update: { method: 'PUT'}\n  });\n}\n","angular.module('finalProject')\n  .directive('daysList', daysList);\n\nfunction daysList() {\n  return {\n    restrict: 'E',\n    replace: true,\n    templateUrl: 'templates/daysList.html',\n    scope: {\n      days: '=',\n      plan: '='\n    // },\n    // link: function($scope) {\n      // console.log($scope);\n    }\n  };\n}\n","angular.module('finalProject')\n  .directive('googleMap', googleMap);\n\ngoogleMap.$inject = ['$window'];\nfunction googleMap($window) {\n  return {\n    restrict: 'E',\n    replace: true,\n    template: '<div class=\"google-map\"></div>',\n    scope: {\n      data: '='\n    },\n    link: function($scope, element) {\n      $scope.$watch('data', () => {\n        const map = new $window.google.maps.Map(element[0], {\n          center: {lat: $scope.data[0].lat, lng: $scope.data[0].lng},\n          zoom: 14,\n          disableDefaultUI: true,\n          zoomControl: true,\n          scaleControl: true,\n          scrollwheel: false\n        });\n\n        const run = new $window.google.maps.Polyline({\n          path: $scope.data,\n          geodesic: true,\n          strokeColor: '#FF0000',\n          strokeOpacity: 1.0,\n          strokeWeight: 2\n        });\n\n        run.setMap(map);\n      });\n    }\n  };\n}\n","angular.module('finalProject')\n  .controller('MainController', MainController);\n\nMainController.$inject = ['$auth','$state','User','UserPlan', '$window', '$scope','$location','$anchorScroll'];\nfunction MainController($auth, $state, User, UserPlan, $window, $scope,$location,$anchorScroll){\n  const main = this;\n  const moment = $window.moment;\n  $location.hash('top');\n  $anchorScroll();\n\n  main.isLoggedIn = $auth.isAuthenticated;\n  main.hasActivePlan = false;\n  $scope.uiRouterState = $state;\n\n  function getUserId() {\n    const userId = $auth.getPayload().id;\n    $state.go('usersShow', {id: userId});\n  }\n\n  // Check if user has Strava account\n  main.hasStrava = $window.localStorage.getItem('strava_token');\n\n  if (main.isLoggedIn()) {\n    main.currentUser = $auth.getPayload().id;\n\n    // Get user data\n    main.all = User.get({id: main.currentUser}, (res) => {\n      res.user_plans.forEach((plan) => {\n        if (plan.active) {\n          main.activePlan = plan.id;\n\n          // Get active user plan\n          UserPlan.get({id: plan.id}, (data) => {\n\n            // Check if plan has started\n            const today = moment().format('YYYY-MM-DD');\n            const startDate = moment(plan.start_date).format('YYYY-MM-DD');\n            (startDate <= today) ?\n              main.planStarted = false: main.planStarted = true;\n\n            data.user_days.forEach((day) => {\n              const date = moment(day.date).format('YYYY-MM-DD');\n              if (date === today) {\n                main.hasActivePlan = true;\n                main.dayId = day.id;\n              }\n            });\n          });\n        }\n      });\n    });\n  }\n\n\n  function logout() {\n    $auth.logout()\n      .then(() => {\n        $state.go('homepage');\n      });\n  }\n\n  main.logout = logout;\n  main.getUserId = getUserId;\n}\n","angular.module('finalProject')\n  .controller('PlansIndexController', PlansIndexController)\n  .controller('PlansShowController', PlansShowController)\n  .controller('PlansEditController', PlansEditController)\n  .controller('PlansNewController', PlansNewController);\n\nPlansIndexController.$inject = ['User', '$auth'];\nfunction PlansIndexController(User, $auth) {\n  const plansIndex = this;\n\n  plansIndex.currentUser = $auth.getPayload().id;\n  plansIndex.all = User.get({id: plansIndex.currentUser}, () => {\n    plansIndex.all.user_plans.forEach((plan) => {\n      if (plan.active) {\n        plansIndex.hasActivePlan = true;\n      }\n    });\n\n  });\n}\n\nPlansShowController.$inject = ['UserPlan' ,'$state','$window'];\nfunction PlansShowController(UserPlan, $state, $window) {\n  const plansShow = this;\n  const moment = $window.moment;\n  UserPlan.get($state.params, (res) => {\n    plansShow.plan = res;\n    plansShow.totalWorkouts = 0;\n    plansShow.totalMiles = 0;\n    plansShow.completedWorkouts = 0;\n    plansShow.completedMiles = 0;\n    plansShow.labels = [];\n    plansShow.series = ['Target', 'Actual'];\n    plansShow.targetData = [];\n    plansShow.actualData =[];\n    plansShow.colors = ['#45b7cd', '#ff6384'];\n    const today =  moment().format('YYYY-MM-DD');\n    const start = moment(plansShow.plan.start_date).format('YYYY-MM-DD');\n    const end = moment(plansShow.plan.end_date).format('YYYY-MM-DD');\n\n    // Check plan status\n    if (start < today && today > end) {\n      plansShow.plan.status = 'past';\n    } else if (start < today && today < end) {\n      plansShow.plan.status = 'current';\n    } else {\n      plansShow.plan.status = 'future';\n    }\n\n    // Check if user has Strava account\n    plansShow.hasStrava = $window.localStorage.getItem('strava_token');\n\n    // Set up chart\n    const numWeeks = plansShow.plan.user_days.length / 7;\n    for (var i = 0; i < numWeeks; i++) {\n      plansShow.labels.push(`Week ${i+1}`);\n      plansShow.targetMiles = 0;\n      plansShow.actualMiles = 0;\n\n      // Aggregate weekly mileage\n      plansShow.plan.user_days.forEach((day) => {\n        if (day.week === i + 1) {\n          if (day.exercise) {\n            plansShow.targetMiles += day.exercise.miles;\n          }\n          if (day.completed) {\n            plansShow.actualMiles += day.exercise.miles;\n          }\n        }\n      });\n\n      plansShow.targetData.push(plansShow.targetMiles);\n      plansShow.actualData.push(plansShow.actualMiles);\n    }\n    plansShow.data = [plansShow.targetData, plansShow.actualData];\n\n    plansShow.plan.user_days.forEach((day) => {\n      // Find current week\n      const date =  moment(day.date).format('YYYY-MM-DD');\n      const today = moment().format('YYYY-MM-DD');\n      if (date === today) {\n        plansShow.currentWeek = day.week;\n      }\n\n      if (day.exercise) {\n        // Calculate total number of workout days\n        plansShow.totalWorkouts += 1;\n        plansShow.totalMiles += day.exercise.miles;\n\n        // Calculate num completed workouts\n        if (day.completed) {\n          plansShow.completedWorkouts += 1;\n          plansShow.completedMiles += day.exercise.miles;\n        }\n      }\n    });\n\n    plansShow.totalMiles = Math.floor(plansShow.totalMiles);\n    plansShow.completedMiles = Math.floor(plansShow.completedMiles);\n\n  });\n}\n\nPlansEditController.$inject = ['$state', 'UserPlan'];\nfunction PlansEditController($state, UserPlan) {\n  const plansEdit = this;\n\n  plansEdit.plan = UserPlan.get($state.params);\n\n  function endPlan() {\n    plansEdit.plan.active = false;\n    UserPlan.update($state.params,plansEdit.plan, () => {\n      $state.go('plansIndex');\n    });\n  }\n\n  function deletePlan() {\n    UserPlan.remove($state.params, () => {\n      $state.go('plansIndex');\n    });\n  }\n\n  plansEdit.endPlan = endPlan;\n  plansEdit.deletePlan = deletePlan;\n}\n\n\nPlansNewController.$inject = ['User', 'UserPlan', '$state'];\nfunction PlansNewController(User, UserPlan, $state) {\n  const plansNew = this;\n\n  User.get($state.params, (user) => {\n    plansNew.userPlans = user.user_plans;\n    plansNew.hasActivePlan = false;\n\n    plansNew.userPlans.forEach((plan) => {\n      if (plan.active === true) {\n        plansNew.hasActivePlan = true;\n        plansNew.activePlan = plan;\n      }\n    });\n\n    if (!plansNew.hasActivePlan){\n      $state.go('setup');\n    }\n  });\n\n  function endPlan(id) {\n    plansNew.activePlan.active = false;\n    UserPlan.update(id, plansNew.activePlan, () => {\n      $state.go('setup');\n    });\n  }\n  plansNew.endPlan = endPlan;\n}\n","angular.module('finalProject')\n  .config(Router);\n\nRouter.$inject = ['$stateProvider', '$urlRouterProvider'];\nfunction Router($stateProvider, $urlRouterProvider) {\n  $stateProvider\n    .state('homepage', {\n      url: '/',\n      templateUrl: '/templates/homepage.html',\n      controller: 'MainController as main'\n    })\n    .state('setup', {\n      url: '/setup',\n      templateUrl: '/templates/setup.html',\n      controller: 'SetupController as setupPlan'\n    })\n    .state('plansIndex', {\n      url: '/plans',\n      templateUrl: '/templates/plansIndex.html',\n      controller: 'PlansIndexController as plansIndex'\n    })\n    .state('plansShow', {\n      url: '/plans/:id',\n      templateUrl: '/templates/plansShow.html',\n      controller: 'PlansShowController as plansShow'\n    })\n    .state('plansEdit', {\n      url: '/plans/:id/end',\n      templateUrl: '/templates/plansEdit.html',\n      controller: 'PlansEditController as plansEdit'\n    })\n    .state('plansNew', {\n      url: '/:id/new',\n      templateUrl: '/templates/plansNew.html',\n      controller: 'PlansNewController as plansNew'\n    })\n    .state('weeksShow', {\n      url: '/plans/:planId/weeks/:weekId',\n      templateUrl: '/templates/weeksShow.html',\n      controller: 'WeeksShowController as weeksShow'\n    })\n    .state('weeksEdit', {\n      url: '/plans/:planId/weeks/:weekId/edit',\n      templateUrl: '/templates/weeksEdit.html',\n      controller: 'WeeksEditController as weeksEdit'\n    })\n    .state('daysIndex', {\n      url: '/plans/:id/days',\n      templateUrl: '/templates/daysIndex.html',\n      controller: 'DaysIndexController as daysIndex'\n    })\n    .state('daysShow', {\n      url: '/plans/:planId/days/:dayId?stravaId',\n      templateUrl: '/templates/daysShow.html',\n      controller: 'DaysShowController as daysShow'\n    })\n    .state('stravaIndex', {\n      url: '/feed',\n      templateUrl: '/templates/activityFeed.html',\n      controller: 'StravaIndexController as stravaIndex'\n    })\n    .state('usersIndex', {\n      url: '/users',\n      templateUrl: '/templates/usersIndex.html',\n      controller: 'UsersIndexController as usersIndex'\n    })\n    .state('usersShow', {\n      url: '/users/:id',\n      templateUrl: '/templates/usersShow.html',\n      controller: 'UsersShowController as usersShow'\n    })\n    .state('usersEdit', {\n      url: '/users/:id/edit',\n      templateUrl: '/templates/usersEdit.html',\n      controller: 'UsersEditController as usersEdit'\n    })\n    .state('register', {\n      url: '/register',\n      templateUrl: '/templates/register.html',\n      controller: 'RegisterController as register'\n    })\n    .state('login', {\n      url: '/login',\n      templateUrl: '/templates/login.html',\n      controller: 'LoginController as login'\n    });\n\n  $urlRouterProvider.otherwise('/');\n}\n","angular.module('finalProject')\n  .controller('SetupController', SetupController);\n\nSetupController.$inject = ['UserPlan','$state','$window'];\nfunction SetupController(UserPlan, $state, $window) {\n  const setupPlan = this;\n  const moment = $window.moment;\n\n  setupPlan.end_date = new Date(moment().add(6, 'weeks').format('YYYY-MM-DD'));\n\n  function create(){\n    UserPlan.save(setupPlan, () => {\n      $state.go('plansIndex');\n    });\n  }\n\n  setupPlan.create = create;\n}\n","angular.module('finalProject')\n  .controller('StravaIndexController', StravaIndexController);\n\nStravaIndexController.$inject = ['$http', 'StravaService','$auth', 'User','UserPlan','Day', '$window', '$state'];\nfunction StravaIndexController($http, StravaService, $auth, User, UserPlan, Day, $window, $state){\n  const stravaIndex = this;\n  const moment = $window.moment;\n  const userId = $auth.getPayload().id;\n  stravaIndex.allActivities = [];\n  stravaIndex.userDays = [];\n\n  function hasStravaToken () {\n    return !!$window.localStorage.getItem('strava_token');\n  }\n\n  function getStravaToken() {\n    return $window.localStorage.getItem('strava_token');\n  }\n\n  function matchUserDays(stravaData) {\n    for(let i=0;i<stravaData.length;i++) {\n      const userDayIdx = stravaIndex.userDays.findIndex((day) => {\n        return moment(day.date).format('YYYY-MM-DD') === stravaData[i].start_date;\n      });\n\n      if(userDayIdx > 0) {\n        stravaData[i].userDay = stravaIndex.userDays.splice(userDayIdx, 1)[0];\n      }\n    }\n\n    return stravaData;\n  }\n\n  function init() {\n    UserPlan.query({ user_id: userId, active: true }).$promise.then((userPlans) => {\n      stravaIndex.planId = userPlans[0].id;\n\n      stravaIndex.userDays = userPlans[0].user_days;\n      if(hasStravaToken()){\n        return StravaService\n          .activityIndex(getStravaToken());\n      }\n    })\n    .then((stravaData) => {\n      stravaIndex.allActivities = matchUserDays(stravaData || []);\n\n      const completedDays = stravaIndex.userDays.filter((day) => {\n        return day.completed;\n      });\n      // stravaIndex.allActivities.concat(completedDays);\n      stravaIndex.allActivities.push(completedDays[0]);\n\n\n    })\n    .catch((err) => {\n      console.log(err);\n    });\n  }\n\n  function markComplete(planId, dayId, stravaId) {\n    Day.update({id: planId.dayId}, { strava_id: planId.stravaId, completed: true   }, () => {\n      $state.go('daysShow', {planId: planId.planId, dayId: planId.dayId, stravaId: planId.stravaId});\n    });\n  }\n\n  function sync() {\n    if (!hasStravaToken()) {\n      $auth.authenticate('strava')\n        .then((res) => {\n          $window.localStorage.setItem('strava_token', res.data.access_token);\n          const stravaId = res.data.athlete.id;\n          User.update({id: userId}, {strava_id: stravaId}, () => {\n            init();\n          });\n        });\n    } else {\n      init();\n    }\n  }\n\n\n  init();\n  stravaIndex.markComplete = markComplete;\n  stravaIndex.sync = sync;\n}\n","angular.module('finalProject')\n  .service('StravaService', StravaService);\n\nStravaService.$inject = ['$http', '$window'];\nfunction StravaService($http, $window) {\n  const moment = $window.moment;\n\n  function activityIndex(accessToken) {\n\n    return $http({\n      method: 'GET',\n      url: 'http://localhost:3000/api/strava',\n      params: {\n        accessToken\n      }\n    }).then(function successCallback(response) {\n      response.data.forEach((activity) => {\n        activity.start_date = moment(activity.start_date).format('YYYY-MM-DD');\n\n        activity.distance = ((activity.distance / 1000) * 0.621371).toFixed(1);\n\n        activity.elapsed_hours = Math.floor(activity.elapsed_time / 60 /60);\n        activity.elapsed_minutes = Math.floor((activity.elapsed_time / 60) % 60);\n        activity.elapsed_seconds = ((((activity.elapsed_time % 60) * 60).toString().slice(0,2)) % 60);\n\n      });\n\n      return response.data;\n    }, function errorCallback(response) {\n      console.log(response);\n    });\n  }\n\n  function activityShow(accessToken, activityId) {\n\n    return $http({\n      method: 'GET',\n      url: 'http://localhost:3000/api/strava/activity',\n      params: {\n        activityId,\n        accessToken\n      }\n    }).then(function successCallback(response) {\n      response.data.distance = ((response.data.distance / 1000) * 0.621371).toFixed(1);\n\n      response.data.elapsed_minutes = Math.floor(response.data.elapsed_time / 60);\n      response.data.elapsed_seconds = ((response.data.elapsed_time % 60) * 60);\n\n\n      return response.data;\n    }, function errorCallback(response) {\n      console.log(response);\n    });\n  }\n\n  this.activityIndex = activityIndex;\n  this.activityShow = activityShow;\n}\n","angular.module('finalProject')\n  .factory('User', User);\n\nUser.$inject = ['$resource', 'API_URL'];\nfunction User($resource, API_URL) {\n  return new $resource(`${API_URL}/users/:id`, { id: '@id'}, {\n    update: { method: 'PUT'}\n  });\n}\n","angular.module('finalProject')\n  .factory('UserPlan', UserPlan);\n\nUserPlan.$inject = ['$resource', 'API_URL'];\nfunction UserPlan($resource, API_URL) {\n  return new $resource(`${API_URL}/user_plans/:id`, { id: '@id'}, {\n    update: { method: 'PUT'}\n  });\n}\n","angular.module('finalProject')\n  .controller('UsersIndexController', UsersIndexController)\n  .controller('UsersShowController', UsersShowController)\n  .controller('UsersEditController', UsersEditController);\n\nUsersIndexController.$inject = ['User'];\nfunction UsersIndexController(User) {\n  const usersIndex = this;\n\n  usersIndex.all = User.query();\n}\n\nUsersShowController.$inject = ['User', '$state','$auth', '$window'];\nfunction UsersShowController(User, $state, $auth, $window) {\n  const usersShow = this;\n  usersShow.user = User.get($state.params);\n\n  function userDelete() {\n    usersShow.user.$remove(() => {\n      $state.go('usersIndex');\n    });\n  }\n\n  function logout() {\n\n    $auth.logout()\n      .then(() => {\n        $window.localStorage.removeItem('strava_token');\n        $state.go('homepage');\n      });\n  }\n\n  function authenticateStrava() {\n    $auth.authenticate('strava')\n      .then((res) => {\n        $window.localStorage.setItem('strava_token', res.data.access_token);\n\n        usersShow.user.strava_id = res.data.athlete.id;\n\n        User.update(usersShow.user.id, usersShow.user, () => {\n          $state.go('stravaIndex');\n        });\n      });\n  }\n\n  usersShow.logout = logout;\n  usersShow.delete = userDelete;\n  usersShow.authenticateStrava = authenticateStrava;\n}\n\nUsersEditController.$inject = ['User', '$state'];\nfunction UsersEditController(User, $state) {\n  const usersEdit = this;\n\n  usersEdit.user = User.get($state.params);\n\n  function update() {\n    User.update(usersEdit.user.id, usersEdit.user, () => {\n      $state.go('usersShow', $state.params);\n    });\n  }\n\n  usersEdit.update = update;\n}\n","angular.module('finalProject')\n  .controller('WeeksShowController', WeeksShowController)\n  .controller('WeeksEditController', WeeksEditController);\n\nWeeksShowController.$inject = ['UserPlan', '$state'];\nfunction WeeksShowController(UserPlan, $state) {\n  const weeksShow = this;\n\n  weeksShow.planId = $state.params.planId;\n  weeksShow.weekId = $state.params.weekId;\n  weeksShow.totalWorkouts = 0;\n  weeksShow.completedWorkouts = 0;\n  weeksShow.totalMiles = 0;\n  weeksShow.completedMiles = 0;\n\n  UserPlan.get({ id: weeksShow.planId, week: weeksShow.weekId}, (week) => {\n    weeksShow.thisWeek = week.user_days;\n\n    weeksShow.thisWeek.forEach((day) => {\n      if (day.exercise) {\n        // Calculate total number of workout days\n        weeksShow.totalWorkouts += 1;\n        weeksShow.totalMiles += day.exercise.miles;\n\n        // Calculate num completed workouts\n        if (day.completed) {\n          weeksShow.completedWorkouts += 1;\n          weeksShow.completedMiles += day.exercise.miles;\n        }\n      }\n    });\n    console.log(weeksShow.thisWeek);\n    weeksShow.totalMiles = Math.floor(weeksShow.totalMiles);\n    weeksShow.completedMiles = Math.floor(weeksShow.completedMiles);\n\n  });\n}\n\nWeeksEditController.$inject = ['UserPlan', '$state'];\nfunction WeeksEditController(UserPlan, $state) {\n  const weeksEdit = this;\n\n  weeksEdit.planId = $state.params.planId;\n  weeksEdit.weekId = $state.params.weekId;\n\n  UserPlan.get({ id: weeksEdit.planId, week: weeksEdit.weekId }, (plan) => {\n    weeksEdit.plan = plan;\n    weeksEdit.thisWeek = plan.user_days.sort(function(a,b) {\n      return a.position - b.position;\n    });\n    weeksEdit.startingDay = plan.user_days[0];\n  });\n\n  function updatePosition($index){\n    let index = weeksEdit.startingDay.position;\n    weeksEdit.thisWeek.splice($index, 1);\n    weeksEdit.thisWeek.forEach((day) => {\n      day.position = index;\n      index++;\n    });\n  }\n\n  function savePlan(){\n    UserPlan.update(weeksEdit.planId, weeksEdit.plan);\n  }\n\n  weeksEdit.updatePosition = updatePosition;\n  weeksEdit.savePlan = savePlan;\n}\n"]}