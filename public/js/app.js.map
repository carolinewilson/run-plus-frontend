{"version":3,"sources":["js/app.js","js/controllers/auth.js","js/controllers/day.js","js/models/day.js","js/controllers/main.js","js/controllers/plan.js","js/router.js","js/controllers/setup.js","js/controllers/strava.js","js/services/stravaService.js","js/models/user.js","js/models/userPlan.js","js/controllers/users.js","js/controllers/week.js"],"names":["Auth","$authProvider","API_URL","loginUrl","signupUrl","tokenPrefix","oauth2","name","url","clientId","redirectUri","window","location","origin","authorizationEndpoint","RegisterController","$auth","$state","submit","signup","register","user","then","go","this","LoginController","login","credentials","res","data","user_plans","forEach","plan","active","activePlans","DaysIndexController","UserPlan","daysIndex","get","params","DaysShowController","Day","markDone","daysShow","day","completed","update","dayId","planId","id","$resource","method","MainController","User","$window","getUserId","userId","getPayload","logout","main","moment","isLoggedIn","isAuthenticated","hasActivePlan","currentUser","all","activePlan","user_days","date","format","today","PlansIndexController","plansIndex","PlansShowController","plansShow","totalWorkouts","totalMiles","completedWorkouts","completedMiles","labels","series","targetData","actualData","colors","start","start_date","future","numWeeks","length","i","push","targetMiles","actualMiles","week","exercise","miles","currentWeek","Math","floor","PlansEditController","endPlan","plansEdit","deletePlan","remove","PlansNewController","plansNew","userPlans","Router","$stateProvider","$urlRouterProvider","state","templateUrl","controller","otherwise","SetupController","create","save","setupPlan","StravaIndexController","$http","StravaService","viewDay","stravaActivityId","console","log","stravaIndex","userPlanId","userDays","accessToken","getActivities","successResponse","errorResponse","response","activity","UsersIndexController","usersIndex","query","UsersShowController","userDelete","usersShow","$remove","localStorage","removeItem","authenticateStrava","authenticate","setItem","access_token","strava_id","athlete","delete","UsersEditController","usersEdit","WeeksShowController","weeksShow","weekId","thisWeek","WeeksEditController","updatePosition","$index","index","weeksEdit","startingDay","position","splice","savePlan","sort","a","b","angular","module","constant","config","$inject","factory","service"],"mappings":"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","file":"app.js","sourcesContent":["angular.module('finalProject', ['ngResource', 'ui.router', 'satellizer','chart.js','dndLists','ngMessages','ngMaterial'])\n  .constant('API_URL', 'http://localhost:3000/api')\n  .config(Auth);\n\nAuth.$inject = ['$authProvider', 'API_URL'];\nfunction Auth($authProvider, API_URL) {\n  $authProvider.loginUrl = `${API_URL}/login`;\n  $authProvider.signupUrl = `${API_URL}/register`;\n\n  $authProvider.tokenPrefix = '';\n\n  $authProvider.oauth2({\n    name: 'strava',\n    url: `${API_URL}/oauth/strava`,\n    clientId: '15120',\n    redirectUri: window.location.origin,\n    authorizationEndpoint: 'https://www.strava.com/oauth/authorize'\n  });\n}\n","angular.module('finalProject')\n  .controller('RegisterController', RegisterController)\n  .controller('LoginController', LoginController);\n\nRegisterController.$inject = ['$auth', '$state'];\nfunction RegisterController($auth, $state) {\n  const register = this;\n\n  register.user = {};\n\n  function submit() {\n    $auth.signup(register.user)\n      .then(() => {\n        $state.go('login');\n      });\n  }\n\n  register.submit = submit;\n}\n\nLoginController.$inject = ['$auth', '$state'];\nfunction LoginController($auth, $state) {\n  const login = this;\n\n  login.credentials = {};\n  login.activePlans = false;\n\n  function submit() {\n    $auth.login(login.credentials)\n      .then((res) => {\n        res.data.user.user_plans.forEach((plan) => {\n          if (plan.active) {\n            login.activePlans = true;\n          }\n        });\n\n        if (login.activePlans) {\n          $state.go('plansIndex');\n        } else {\n          $state.go('setup');\n        }\n      });\n  }\n\n  login.submit = submit;\n}\n","angular.module('finalProject')\n  .controller('DaysIndexController', DaysIndexController)\n  .controller('DaysShowController', DaysShowController);\n\nDaysIndexController.$inject = ['UserPlan', '$state'];\nfunction DaysIndexController(UserPlan, $state) {\n  const daysIndex = this;\n\n  daysIndex.plan = UserPlan.get($state.params);\n}\n\nDaysShowController.$inject = ['Day', '$state'];\nfunction DaysShowController(Day, $state) {\n  const daysShow = this;\n\n  daysShow.planId = $state.params.planId;\n  daysShow.dayId = $state.params.dayId;\n\n  daysShow.day = Day.get({ id: daysShow.dayId });\n\n  function markDone(){\n    daysShow.day.completed = true;\n    Day.update(daysShow.dayId, daysShow.day);\n  }\n\n  daysShow.markDone = markDone;\n}\n","angular.module('finalProject')\n  .factory('Day', Day);\n\nDay.$inject = ['$resource', 'API_URL'];\nfunction Day($resource, API_URL) {\n  return new $resource(`${API_URL}/user_days/:id`, { id: '@id'}, {\n    update: { method: 'PUT'}\n  });\n}\n","angular.module('finalProject')\n  .controller('MainController', MainController);\n\nMainController.$inject = ['$auth','$state','User','UserPlan', '$window'];\nfunction MainController($auth, $state, User, UserPlan, $window){\n  const main = this;\n  const moment = $window.moment;\n\n  main.isLoggedIn = $auth.isAuthenticated;\n  main.hasActivePlan = false;\n\n  function getUserId() {\n    const userId = $auth.getPayload().id;\n    $state.go('usersShow', {id: userId});\n  }\n\n  if (main.isLoggedIn()) {\n    main.currentUser = $auth.getPayload().id;\n\n    main.all = User.get({id: main.currentUser}, (res) => {\n      res.user_plans.forEach((plan) => {\n        if (plan.active) {\n          main.activePlan = plan.id;\n\n          UserPlan.get({id: plan.id}, (data) => {\n            data.user_days.forEach((day) => {\n              const date = moment(day.date).format('YYYY-MM-DD');\n              const today = moment().format('YYYY-MM-DD');\n              if (date === today) {\n                main.hasActivePlan = true;\n                main.dayId = day.id;\n              }\n            });\n          });\n        }\n      });\n    });\n  }\n\n\n  function logout() {\n    $auth.logout()\n      .then(() => {\n        $state.go('homepage');\n      });\n  }\n\n  main.logout = logout;\n  main.getUserId = getUserId;\n}\n","angular.module('finalProject')\n  .controller('PlansIndexController', PlansIndexController)\n  .controller('PlansShowController', PlansShowController)\n  .controller('PlansEditController', PlansEditController)\n  .controller('PlansNewController', PlansNewController);\n\nPlansIndexController.$inject = ['User', '$auth'];\nfunction PlansIndexController(User, $auth) {\n  const plansIndex = this;\n\n  plansIndex.currentUser = $auth.getPayload().id;\n  plansIndex.all = User.get({id: plansIndex.currentUser}, () => {\n    plansIndex.all.user_plans.forEach((plan) => {\n      if (plan.active) {\n        plansIndex.hasActivePlan = true;\n      }\n    });\n\n  });\n}\n\nPlansShowController.$inject = ['UserPlan' ,'$state','$window'];\nfunction PlansShowController(UserPlan, $state, $window) {\n  const plansShow = this;\n  const moment = $window.moment;\n\n  plansShow.plan = UserPlan.get($state.params, () => {\n\n    plansShow.totalWorkouts = 0;\n    plansShow.totalMiles = 0;\n    plansShow.completedWorkouts = 0;\n    plansShow.completedMiles = 0;\n    plansShow.labels = [];\n    plansShow.series = ['Target', 'Actual'];\n    plansShow.targetData = [];\n    plansShow.actualData =[];\n    plansShow.colors = ['#45b7cd', '#ff6384'];\n\n    // Check if plan has started\n    if (plansShow.plan.active) {\n      const start = moment(plansShow.plan.start_date).format('YYYY-MM-DD');\n      const today =  moment().format('YYYY-MM-DD');\n\n      if (start > today) {\n        plansShow.plan.future = true;\n      }\n    }\n\n    // Set up chart\n    const numWeeks = plansShow.plan.user_days.length / 7;\n    for (var i = 0; i < numWeeks; i++) {\n      plansShow.labels.push(`Week ${i+1}`);\n      plansShow.targetMiles = 0;\n      plansShow.actualMiles = 0;\n\n      // Aggregate weekly mileage\n      plansShow.plan.user_days.forEach((day) => {\n        if (day.week === i + 1) {\n          if (day.exercise) {\n            plansShow.targetMiles += day.exercise.miles;\n          }\n          if (day.completed) {\n            plansShow.actualMiles += day.exercise.miles;\n          }\n        }\n      });\n\n      plansShow.targetData.push(plansShow.targetMiles);\n      plansShow.actualData.push(plansShow.actualMiles);\n    }\n    plansShow.data = [plansShow.targetData, plansShow.actualData];\n\n    plansShow.plan.user_days.forEach((day) => {\n      // Find current week\n      const date =  moment(day.date).format('YYYY-MM-DD');\n      const today = moment().format('YYYY-MM-DD');\n      if (date === today) {\n        plansShow.currentWeek = day.week;\n      }\n\n      if (day.exercise) {\n        // Calculate total number of workout days\n        plansShow.totalWorkouts += 1;\n        plansShow.totalMiles += day.exercise.miles;\n\n        // Calculate num completed workouts\n        if (day.completed) {\n          plansShow.completedWorkouts += 1;\n          plansShow.completedMiles += day.exercise.miles;\n        }\n      }\n    });\n\n    plansShow.totalMiles = Math.floor(plansShow.totalMiles);\n    plansShow.completedMiles = Math.floor(plansShow.completedMiles);\n\n  });\n}\n\nPlansEditController.$inject = ['$state', 'UserPlan'];\nfunction PlansEditController($state, UserPlan) {\n  const plansEdit = this;\n\n  plansEdit.plan = UserPlan.get($state.params);\n\n  function endPlan() {\n    plansEdit.plan.active = false;\n    UserPlan.update($state.params,plansEdit.plan, () => {\n      $state.go('plansIndex');\n    });\n  }\n\n  function deletePlan() {\n    UserPlan.remove($state.params, () => {\n      $state.go('plansIndex');\n    });\n  }\n\n  plansEdit.endPlan = endPlan;\n  plansEdit.deletePlan = deletePlan;\n}\n\n\nPlansNewController.$inject = ['User', 'UserPlan', '$state'];\nfunction PlansNewController(User, UserPlan, $state) {\n  const plansNew = this;\n\n  User.get($state.params, (user) => {\n    plansNew.userPlans = user.user_plans;\n    plansNew.hasActivePlan = false;\n\n    plansNew.userPlans.forEach((plan) => {\n      if (plan.active === true) {\n        plansNew.hasActivePlan = true;\n        plansNew.activePlan = plan;\n      }\n    });\n\n    if (!plansNew.hasActivePlan){\n      $state.go('setup');\n    }\n  });\n\n  function endPlan(id) {\n    plansNew.activePlan.active = false;\n    UserPlan.update(id, plansNew.activePlan, () => {\n      $state.go('setup');\n    });\n  }\n  plansNew.endPlan = endPlan;\n}\n","angular.module('finalProject')\n  .config(Router);\n\nRouter.$inject = ['$stateProvider', '$urlRouterProvider'];\nfunction Router($stateProvider, $urlRouterProvider) {\n  $stateProvider\n    .state('homepage', {\n      url: '/',\n      templateUrl: '/templates/homepage.html',\n      controller: 'MainController as main'\n    })\n    .state('setup', {\n      url: '/setup',\n      templateUrl: '/templates/setup.html',\n      controller: 'SetupController as setupPlan'\n    })\n    .state('plansIndex', {\n      url: '/plans',\n      templateUrl: '/templates/plansIndex.html',\n      controller: 'PlansIndexController as plansIndex'\n    })\n    .state('plansShow', {\n      url: '/plans/:id',\n      templateUrl: '/templates/plansShow.html',\n      controller: 'PlansShowController as plansShow'\n    })\n    .state('plansEdit', {\n      url: '/plans/:id/end',\n      templateUrl: '/templates/plansEdit.html',\n      controller: 'PlansEditController as plansEdit'\n    })\n    .state('plansNew', {\n      url: '/:id/new',\n      templateUrl: '/templates/plansNew.html',\n      controller: 'PlansNewController as plansNew'\n    })\n    .state('weeksShow', {\n      url: '/plans/:planId/weeks/:weekId',\n      templateUrl: '/templates/weeksShow.html',\n      controller: 'WeeksShowController as weeksShow'\n    })\n    .state('weeksEdit', {\n      url: '/plans/:planId/weeks/:weekId/edit',\n      templateUrl: '/templates/weeksEdit.html',\n      controller: 'WeeksEditController as weeksEdit'\n    })\n    .state('daysIndex', {\n      url: '/plans/:id/days',\n      templateUrl: '/templates/daysIndex.html',\n      controller: 'DaysIndexController as daysIndex'\n    })\n    .state('daysShow', {\n      url: '/plans/:planId/days/:dayId',\n      templateUrl: '/templates/daysShow.html',\n      controller: 'DaysShowController as daysShow'\n    })\n    .state('stravaIndex', {\n      url: '/strava',\n      templateUrl: '/templates/stravaIndex.html',\n      controller: 'StravaIndexController as stravaIndex'\n    })\n    .state('usersIndex', {\n      url: '/users',\n      templateUrl: '/templates/usersIndex.html',\n      controller: 'UsersIndexController as usersIndex'\n    })\n    .state('usersShow', {\n      url: '/users/:id',\n      templateUrl: '/templates/usersShow.html',\n      controller: 'UsersShowController as usersShow'\n    })\n    .state('usersEdit', {\n      url: '/users/:id/edit',\n      templateUrl: '/templates/usersEdit.html',\n      controller: 'UsersEditController as usersEdit'\n    })\n    .state('register', {\n      url: '/register',\n      templateUrl: '/templates/register.html',\n      controller: 'RegisterController as register'\n    })\n    .state('login', {\n      url: '/login',\n      templateUrl: '/templates/login.html',\n      controller: 'LoginController as login'\n    });\n\n  $urlRouterProvider.otherwise('/');\n}\n","angular.module('finalProject')\n  .controller('SetupController', SetupController);\n\nSetupController.$inject = ['UserPlan','$state'];\nfunction SetupController(UserPlan, $state) {\n  const setupPlan = this;\n\n  function create(){\n    UserPlan.save(setupPlan, () => {\n      $state.go('plansIndex');\n    });\n  }\n\n  setupPlan.create = create;\n}\n","angular.module('finalProject')\n  .controller('StravaIndexController', StravaIndexController);\n\nStravaIndexController.$inject = ['$http', 'StravaService','$auth', 'User','UserPlan', '$window'];\nfunction StravaIndexController($http, StravaService, $auth, User, UserPlan, $window){\n  const stravaIndex = this;\n  const moment = $window.moment;\n  const userId = $auth.getPayload().id;\n\n  User.get({id: userId}, (res) => {\n    res.user_plans.forEach((plan) => {\n      if (plan.active) {\n        stravaIndex.userPlanId = plan.id;\n        UserPlan.get({id: plan.id }, (data) => {\n          stravaIndex.userDays = data.user_days;\n          data.user_days.forEach((day) => {\n            day.date = moment(day.date).format('YYYY-MM-DD');\n          });\n\n        });\n      }\n    });\n  });\n\n\n  // Get activities from Strava\n  const accessToken = 'b4a334d702082f818e68b3dc918cc7491a3e780c';\n\n  StravaService\n    .getActivities(accessToken)\n    .then(\n      successResponse => {\n        stravaIndex.data = successResponse;\n      },\n      errorResponse => {\n        console.log(errorResponse);\n      }\n    );\n\n  function viewDay(stravaActivityId) {\n    console.log('clicked');\n    console.log(stravaActivityId);\n  }\n  stravaIndex.viewDay = viewDay;\n}\n","angular.module('finalProject')\n  .service('StravaService', StravaService);\n\nStravaService.$inject = ['$http'];\nfunction StravaService($http) {\n\n  function getActivities(accessToken) {\n\n    return $http({\n      method: 'GET',\n      url: 'http://localhost:3000/api/strava',\n      params: {\n        accessToken\n      }\n    }).then(function successCallback(response) {\n      response.data.forEach((activity) => {\n        activity.start_date = moment(activity.start_date).format(\"YYYY-MM-DD\");\n      });\n\n      return response.data;\n    }, function errorCallback(response) {\n      console.log(response);\n    });\n  }\n\n  this.getActivities = getActivities;\n}\n","angular.module('finalProject')\n  .factory('User', User);\n\nUser.$inject = ['$resource', 'API_URL'];\nfunction User($resource, API_URL) {\n  return new $resource(`${API_URL}/users/:id`, { id: '@id'}, {\n    update: { method: 'PUT'}\n  });\n}\n","angular.module('finalProject')\n  .factory('UserPlan', UserPlan);\n\nUserPlan.$inject = ['$resource', 'API_URL'];\nfunction UserPlan($resource, API_URL) {\n  return new $resource(`${API_URL}/user_plans/:id`, { id: '@id'}, {\n    update: { method: 'PUT'}\n  });\n}\n","angular.module('finalProject')\n  .controller('UsersIndexController', UsersIndexController)\n  .controller('UsersShowController', UsersShowController)\n  .controller('UsersEditController', UsersEditController);\n\nUsersIndexController.$inject = ['User'];\nfunction UsersIndexController(User) {\n  const usersIndex = this;\n\n  usersIndex.all = User.query();\n}\n\nUsersShowController.$inject = ['User', '$state','$auth', '$window'];\nfunction UsersShowController(User, $state, $auth, $window) {\n  const usersShow = this;\n  usersShow.user = User.get($state.params);\n\n  function userDelete() {\n    usersShow.user.$remove(() => {\n      $state.go('usersIndex');\n    });\n  }\n\n  function logout() {\n  \n    $auth.logout()\n      .then(() => {\n        $window.localStorage.removeItem('strava_token');\n        $state.go('homepage');\n      });\n  }\n\n  function authenticateStrava() {\n    $auth.authenticate('strava')\n      .then((res) => {\n        $window.localStorage.setItem('strava_token', res.data.access_token);\n\n        usersShow.user.strava_id = res.data.athlete.id;\n\n        User.update(usersShow.user.id, usersShow.user, (data) => {\n          console.log(data);\n        });\n      });\n  }\n\n  usersShow.logout = logout;\n  usersShow.delete = userDelete;\n  usersShow.authenticateStrava = authenticateStrava;\n}\n\nUsersEditController.$inject = ['User', '$state'];\nfunction UsersEditController(User, $state) {\n  const usersEdit = this;\n\n  usersEdit.user = User.get($state.params);\n\n  function update() {\n    User.update(usersEdit.user.id, usersEdit.user, () => {\n      $state.go('usersShow', $state.params);\n    });\n  }\n\n  usersEdit.update = update;\n}\n","angular.module('finalProject')\n  .controller('WeeksShowController', WeeksShowController)\n  .controller('WeeksEditController', WeeksEditController);\n\nWeeksShowController.$inject = ['UserPlan', '$state'];\nfunction WeeksShowController(UserPlan, $state) {\n  const weeksShow = this;\n\n  weeksShow.planId = $state.params.planId;\n  weeksShow.weekId = $state.params.weekId;\n  weeksShow.totalWorkouts = 0;\n  weeksShow.completedWorkouts = 0;\n  weeksShow.totalMiles = 0;\n  weeksShow.completedMiles = 0;\n\n  UserPlan.get({ id: weeksShow.planId, week: weeksShow.weekId}, (week) => {\n    weeksShow.thisWeek = week.user_days;\n\n    weeksShow.thisWeek.forEach((day) => {\n      if (day.exercise) {\n        // Calculate total number of workout days\n        weeksShow.totalWorkouts += 1;\n        weeksShow.totalMiles += day.exercise.miles;\n\n        // Calculate num completed workouts\n        if (day.completed) {\n          weeksShow.completedWorkouts += 1;\n          weeksShow.completedMiles += day.exercise.miles;\n        }\n      }\n    });\n\n    weeksShow.totalMiles = Math.floor(weeksShow.totalMiles);\n    weeksShow.completedMiles = Math.floor(weeksShow.completedMiles);\n\n  });\n}\n\nWeeksEditController.$inject = ['UserPlan', '$state'];\nfunction WeeksEditController(UserPlan, $state) {\n  const weeksEdit = this;\n\n  weeksEdit.planId = $state.params.planId;\n  weeksEdit.weekId = $state.params.weekId;\n\n  UserPlan.get({ id: weeksEdit.planId, week: weeksEdit.weekId }, (plan) => {\n    weeksEdit.plan = plan;\n    weeksEdit.thisWeek = plan.user_days.sort(function(a,b) {\n      return a.position - b.position;\n    });\n    weeksEdit.startingDay = plan.user_days[0];\n  });\n\n  function updatePosition($index){\n    let index = weeksEdit.startingDay.position;\n    weeksEdit.thisWeek.splice($index, 1);\n    weeksEdit.thisWeek.forEach((day) => {\n      day.position = index;\n      index++;\n    });\n  }\n\n  function savePlan(){\n    UserPlan.update(weeksEdit.planId, weeksEdit.plan);\n  }\n\n  weeksEdit.updatePosition = updatePosition;\n  weeksEdit.savePlan = savePlan;\n}\n"]}