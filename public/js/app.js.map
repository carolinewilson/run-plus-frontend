{"version":3,"sources":["js/app.js","js/controllers/auth.js","js/controllers/day.js","js/models/day.js","js/directives/daysList.js","js/directives/googleMap.js","js/controllers/main.js","js/controllers/plan.js","js/router.js","js/controllers/setup.js","js/controllers/strava.js","js/services/stravaService.js","js/models/user.js","js/models/userPlan.js","js/controllers/users.js","js/controllers/week.js"],"names":["Auth","$authProvider","API_URL","loginUrl","signupUrl","tokenPrefix","oauth2","name","url","clientId","redirectUri","window","location","origin","authorizationEndpoint","RegisterController","$auth","$state","$window","submit","signup","register","user","then","res","localStorage","setItem","data","token","go","this","LoginController","login","credentials","user_plans","forEach","plan","active","activePlans","DaysIndexController","UserPlan","daysIndex","moment","get","params","user_days","day","dayOfWeekIndex","date","dayOfWeek","DaysShowController","Day","StravaService","markDone","daysShow","completed","update","dayId","planId","id","stravaId","accessToken","getItem","stravaActivityId","activityShow","successResponse","stravaData","errorResponse","console","log","$resource","method","daysList","restrict","replace","templateUrl","scope","days","googleMap","template","link","$scope","element","$watch","map","google","maps","Map","center","lat","lng","zoom","disableDefaultUI","zoomControl","scaleControl","scrollwheel","run","Polyline","path","geodesic","strokeColor","strokeOpacity","strokeWeight","setMap","MainController","User","$location","$anchorScroll","getUserId","userId","getPayload","logout","main","hash","isLoggedIn","isAuthenticated","hasActivePlan","uiRouterState","hasStrava","currentUser","all","activePlan","today","format","startDate","start_date","planStarted","PlansIndexController","plansIndex","PlansShowController","plansShow","totalWorkouts","totalMiles","completedWorkouts","completedMiles","labels","series","targetData","actualData","colors","start","end","end_date","status","numWeeks","length","i","push","targetMiles","actualMiles","week","exercise","miles","currentWeek","Math","floor","PlansEditController","endPlan","plansEdit","deletePlan","remove","PlansNewController","plansNew","userPlans","Router","$stateProvider","$urlRouterProvider","state","controller","otherwise","SetupController","create","save","setupPlan","Date","add","StravaIndexController","$http","hasStravaToken","getStravaToken","matchUserDays","_loop","userDayIdx","stravaIndex","userDays","findIndex","userDay","splice","init","query","user_id","$promise","activityIndex","allActivities","completedDays","filter","catch","err","markComplete","strava_id","sync","authenticate","access_token","athlete","response","activity","distance","toFixed","elapsed_hours","elapsed_time","elapsed_minutes","elapsed_seconds","toString","slice","activityId","UsersIndexController","usersIndex","UsersShowController","userDelete","usersShow","$remove","removeItem","authenticateStrava","delete","UsersEditController","usersEdit","WeeksShowController","weeksShow","weekId","thisWeek","WeeksEditController","updatePosition","$index","index","weeksEdit","startingDay","position","savePlan","sort","a","b","angular","module","constant","config","$inject","factory","directive","service"],"mappings":"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","file":"app.js","sourcesContent":["angular.module('finalProject', ['ngResource', 'ui.router', 'satellizer','chart.js','dndLists','ngMessages','ngMaterial'])\n  .constant('API_URL', 'http://localhost:3000/api')\n  .config(Auth);\n\nAuth.$inject = ['$authProvider', 'API_URL'];\nfunction Auth($authProvider, API_URL) {\n  $authProvider.loginUrl = `${API_URL}/login`;\n  $authProvider.signupUrl = `${API_URL}/register`;\n\n  $authProvider.tokenPrefix = '';\n\n  $authProvider.oauth2({\n    name: 'strava',\n    url: `${API_URL}/oauth/strava`,\n    clientId: '15120',\n    redirectUri: window.location.origin,\n    authorizationEndpoint: 'https://www.strava.com/oauth/authorize'\n  });\n}\n","angular.module('finalProject')\n  .controller('RegisterController', RegisterController)\n  .controller('LoginController', LoginController);\n\nRegisterController.$inject = ['$auth', '$state','$window'];\nfunction RegisterController($auth, $state, $window) {\n  const register = this;\n\n  register.user = {};\n\n  function submit() {\n    $auth.signup(register.user)\n      .then((res) => {\n        $window.localStorage.setItem('token', res.data.token);\n        $state.go('setup');\n      });\n  }\n\n  register.submit = submit;\n}\n\nLoginController.$inject = ['$auth', '$state'];\nfunction LoginController($auth, $state) {\n  const login = this;\n\n  login.credentials = {};\n  login.activePlans = false;\n\n  function submit() {\n    $auth.login(login.credentials)\n      .then((res) => {\n        res.data.user.user_plans.forEach((plan) => {\n          if (plan.active) {\n            login.activePlans = true;\n          }\n        });\n\n        if (login.activePlans) {\n          $state.go('plansIndex');\n        } else {\n          $state.go('setup');\n        }\n      });\n  }\n\n  login.submit = submit;\n}\n","angular.module('finalProject')\n  .controller('DaysIndexController', DaysIndexController)\n  .controller('DaysShowController', DaysShowController);\n\nDaysIndexController.$inject = ['UserPlan', '$state','$window'];\nfunction DaysIndexController(UserPlan, $state, $window) {\n  const daysIndex = this;\n  const moment = $window.moment;\n\n  UserPlan.get($state.params, (res) => {\n    res.user_days.forEach((day) => {\n      // Get day of week\n      day.dayOfWeekIndex = moment(day.date).day();\n\n      switch (day.dayOfWeekIndex) {\n        case 1:\n          day.dayOfWeek = 'M';\n          break;\n        case 2:\n          day.dayOfWeek = 'T';\n          break;\n        case 3:\n          day.dayOfWeek = 'W';\n          break;\n        case 4:\n          day.dayOfWeek = 'T';\n          break;\n        case 5:\n          day.dayOfWeek = 'F';\n          break;\n        case 6:\n          day.dayOfWeek = 'S';\n          break;\n        case 0:\n          day.dayOfWeek = 'S';\n          break;\n      }\n    });\n    daysIndex.plan = res;\n  });\n\n}\n\nDaysShowController.$inject = ['Day', '$state', '$window', 'StravaService'];\nfunction DaysShowController(Day, $state, $window, StravaService) {\n  const daysShow = this;\n\n  daysShow.planId = $state.params.planId;\n  daysShow.dayId = $state.params.dayId;\n\n  daysShow.day = Day.get({ id: daysShow.dayId });\n\n  if ($state.params.stravaId) {\n    // Get activities from Strava\n    const accessToken = $window.localStorage.getItem('strava_token');\n    const stravaActivityId = $state.params.stravaId;\n\n\n    StravaService\n      .activityShow(accessToken, stravaActivityId)\n      .then(\n        successResponse => {\n          daysShow.stravaData = successResponse;\n        },\n        errorResponse => {\n          console.log(errorResponse);\n        }\n      );\n  }\n\n  function markDone(){\n    daysShow.day.completed = true;\n    Day.update(daysShow.dayId, daysShow.day);\n  }\n\n  daysShow.markDone = markDone;\n}\n","angular.module('finalProject')\n  .factory('Day', Day);\n\nDay.$inject = ['$resource', 'API_URL'];\nfunction Day($resource, API_URL) {\n  return new $resource(`${API_URL}/user_days/:id`, { id: '@id'}, {\n    update: { method: 'PUT'}\n  });\n}\n","angular.module('finalProject')\n  .directive('daysList', daysList);\n\nfunction daysList() {\n  return {\n    restrict: 'E',\n    replace: true,\n    templateUrl: 'templates/daysList.html',\n    scope: {\n      days: '=',\n      plan: '='\n    }\n  };\n}\n","angular.module('finalProject')\n  .directive('googleMap', googleMap);\n\ngoogleMap.$inject = ['$window'];\nfunction googleMap($window) {\n  return {\n    restrict: 'E',\n    replace: true,\n    template: '<div class=\"google-map\"></div>',\n    scope: {\n      data: '='\n    },\n    link: function($scope, element) {\n      $scope.$watch('data', () => {\n        const map = new $window.google.maps.Map(element[0], {\n          center: {lat: $scope.data[0].lat, lng: $scope.data[0].lng},\n          zoom: 14,\n          disableDefaultUI: true,\n          zoomControl: true,\n          scaleControl: true,\n          scrollwheel: false\n        });\n\n        const run = new $window.google.maps.Polyline({\n          path: $scope.data,\n          geodesic: true,\n          strokeColor: '#FF0000',\n          strokeOpacity: 1.0,\n          strokeWeight: 2\n        });\n\n        run.setMap(map);\n      });\n    }\n  };\n}\n","angular.module('finalProject')\n  .controller('MainController', MainController);\n\nMainController.$inject = ['$auth','$state','User','UserPlan', '$window', '$scope','$location','$anchorScroll'];\nfunction MainController($auth, $state, User, UserPlan, $window, $scope,$location,$anchorScroll){\n  const main = this;\n  const moment = $window.moment;\n  $location.hash('top');\n  $anchorScroll();\n\n  main.isLoggedIn = $auth.isAuthenticated;\n  main.hasActivePlan = false;\n  $scope.uiRouterState = $state;\n\n  function getUserId() {\n    const userId = $auth.getPayload().id;\n    $state.go('usersShow', {id: userId});\n  }\n\n  // Check if user has Strava account\n  main.hasStrava = $window.localStorage.getItem('strava_token');\n\n  if (main.isLoggedIn()) {\n    main.currentUser = $auth.getPayload().id;\n\n    // Get user data\n    main.all = User.get({id: main.currentUser}, (res) => {\n      res.user_plans.forEach((plan) => {\n        if (plan.active) {\n          main.activePlan = plan.id;\n\n          // Get active user plan\n          UserPlan.get({id: plan.id}, (data) => {\n\n            // Check if plan has started\n            const today = moment().format('YYYY-MM-DD');\n            const startDate = moment(plan.start_date).format('YYYY-MM-DD');\n            (startDate <= today) ?\n              main.planStarted = false: main.planStarted = true;\n\n            data.user_days.forEach((day) => {\n              const date = moment(day.date).format('YYYY-MM-DD');\n              if (date === today) {\n                main.hasActivePlan = true;\n                main.dayId = day.id;\n              }\n            });\n          });\n        }\n      });\n    });\n  }\n\n\n  function logout() {\n    $auth.logout()\n      .then(() => {\n        $state.go('homepage');\n      });\n  }\n\n  main.logout = logout;\n  main.getUserId = getUserId;\n}\n","angular.module('finalProject')\n  .controller('PlansIndexController', PlansIndexController)\n  .controller('PlansShowController', PlansShowController)\n  .controller('PlansEditController', PlansEditController)\n  .controller('PlansNewController', PlansNewController);\n\nPlansIndexController.$inject = ['User', '$auth'];\nfunction PlansIndexController(User, $auth) {\n  const plansIndex = this;\n\n  plansIndex.currentUser = $auth.getPayload().id;\n  plansIndex.all = User.get({id: plansIndex.currentUser}, () => {\n    plansIndex.all.user_plans.forEach((plan) => {\n      if (plan.active) {\n        plansIndex.hasActivePlan = true;\n      }\n    });\n\n  });\n}\n\nPlansShowController.$inject = ['UserPlan' ,'$state','$window'];\nfunction PlansShowController(UserPlan, $state, $window) {\n  const plansShow = this;\n  const moment = $window.moment;\n  UserPlan.get($state.params, (res) => {\n    plansShow.plan = res;\n    plansShow.totalWorkouts = 0;\n    plansShow.totalMiles = 0;\n    plansShow.completedWorkouts = 0;\n    plansShow.completedMiles = 0;\n    plansShow.labels = [];\n    plansShow.series = ['Target', 'Actual'];\n    plansShow.targetData = [];\n    plansShow.actualData =[];\n    plansShow.colors = ['#45b7cd', '#ff6384'];\n    const today =  moment().format('YYYY-MM-DD');\n    const start = moment(plansShow.plan.start_date).format('YYYY-MM-DD');\n    const end = moment(plansShow.plan.end_date).format('YYYY-MM-DD');\n\n    // Check plan status\n    if (start < today && today > end) {\n      plansShow.plan.status = 'past';\n    } else if (start < today && today < end) {\n      plansShow.plan.status = 'current';\n    } else {\n      plansShow.plan.status = 'future';\n    }\n\n    // Check if user has Strava account\n    plansShow.hasStrava = $window.localStorage.getItem('strava_token');\n\n    // Set up chart\n    const numWeeks = plansShow.plan.user_days.length / 7;\n    for (var i = 0; i < numWeeks; i++) {\n      plansShow.labels.push(`Week ${i+1}`);\n      plansShow.targetMiles = 0;\n      plansShow.actualMiles = 0;\n\n      // Aggregate weekly mileage\n      plansShow.plan.user_days.forEach((day) => {\n        if (day.week === i + 1) {\n          if (day.exercise) {\n            plansShow.targetMiles += day.exercise.miles;\n          }\n          if (day.completed) {\n            plansShow.actualMiles += day.exercise.miles;\n          }\n        }\n      });\n\n      plansShow.targetData.push(plansShow.targetMiles);\n      plansShow.actualData.push(plansShow.actualMiles);\n    }\n    plansShow.data = [plansShow.targetData, plansShow.actualData];\n\n    plansShow.plan.user_days.forEach((day) => {\n      // Find current week\n      const date =  moment(day.date).format('YYYY-MM-DD');\n      const today = moment().format('YYYY-MM-DD');\n      if (date === today) {\n        plansShow.currentWeek = day.week;\n      }\n\n      if (day.exercise) {\n        // Calculate total number of workout days\n        plansShow.totalWorkouts += 1;\n        plansShow.totalMiles += day.exercise.miles;\n\n        // Calculate num completed workouts\n        if (day.completed) {\n          plansShow.completedWorkouts += 1;\n          plansShow.completedMiles += day.exercise.miles;\n        }\n      }\n    });\n\n    plansShow.totalMiles = Math.floor(plansShow.totalMiles);\n    plansShow.completedMiles = Math.floor(plansShow.completedMiles);\n\n  });\n}\n\nPlansEditController.$inject = ['$state', 'UserPlan'];\nfunction PlansEditController($state, UserPlan) {\n  const plansEdit = this;\n\n  plansEdit.plan = UserPlan.get($state.params);\n\n  function endPlan() {\n    plansEdit.plan.active = false;\n    UserPlan.update($state.params,plansEdit.plan, () => {\n      $state.go('plansIndex');\n    });\n  }\n\n  function deletePlan() {\n    UserPlan.remove($state.params, () => {\n      $state.go('plansIndex');\n    });\n  }\n\n  plansEdit.endPlan = endPlan;\n  plansEdit.deletePlan = deletePlan;\n}\n\n\nPlansNewController.$inject = ['User', 'UserPlan', '$state'];\nfunction PlansNewController(User, UserPlan, $state) {\n  const plansNew = this;\n\n  User.get($state.params, (user) => {\n    plansNew.userPlans = user.user_plans;\n    plansNew.hasActivePlan = false;\n\n    plansNew.userPlans.forEach((plan) => {\n      if (plan.active === true) {\n        plansNew.hasActivePlan = true;\n        plansNew.activePlan = plan;\n      }\n    });\n\n    if (!plansNew.hasActivePlan){\n      $state.go('setup');\n    }\n  });\n\n  function endPlan(id) {\n    plansNew.activePlan.active = false;\n    UserPlan.update(id, plansNew.activePlan, () => {\n      $state.go('setup');\n    });\n  }\n  plansNew.endPlan = endPlan;\n}\n","angular.module('finalProject')\n  .config(Router);\n\nRouter.$inject = ['$stateProvider', '$urlRouterProvider'];\nfunction Router($stateProvider, $urlRouterProvider) {\n  $stateProvider\n    .state('homepage', {\n      url: '/',\n      templateUrl: '/templates/homepage.html',\n      controller: 'MainController as main'\n    })\n    .state('setup', {\n      url: '/setup',\n      templateUrl: '/templates/setup.html',\n      controller: 'SetupController as setupPlan'\n    })\n    .state('plansIndex', {\n      url: '/plans',\n      templateUrl: '/templates/plansIndex.html',\n      controller: 'PlansIndexController as plansIndex'\n    })\n    .state('plansShow', {\n      url: '/plans/:id',\n      templateUrl: '/templates/plansShow.html',\n      controller: 'PlansShowController as plansShow'\n    })\n    .state('plansEdit', {\n      url: '/plans/:id/end',\n      templateUrl: '/templates/plansEdit.html',\n      controller: 'PlansEditController as plansEdit'\n    })\n    .state('plansNew', {\n      url: '/:id/new',\n      templateUrl: '/templates/plansNew.html',\n      controller: 'PlansNewController as plansNew'\n    })\n    .state('weeksShow', {\n      url: '/plans/:planId/weeks/:weekId',\n      templateUrl: '/templates/weeksShow.html',\n      controller: 'WeeksShowController as weeksShow'\n    })\n    .state('weeksEdit', {\n      url: '/plans/:planId/weeks/:weekId/edit',\n      templateUrl: '/templates/weeksEdit.html',\n      controller: 'WeeksEditController as weeksEdit'\n    })\n    .state('daysIndex', {\n      url: '/plans/:id/days',\n      templateUrl: '/templates/daysIndex.html',\n      controller: 'DaysIndexController as daysIndex'\n    })\n    .state('daysShow', {\n      url: '/plans/:planId/days/:dayId?stravaId',\n      templateUrl: '/templates/daysShow.html',\n      controller: 'DaysShowController as daysShow'\n    })\n    .state('stravaIndex', {\n      url: '/feed',\n      templateUrl: '/templates/activityFeed.html',\n      controller: 'StravaIndexController as stravaIndex'\n    })\n    .state('usersIndex', {\n      url: '/users',\n      templateUrl: '/templates/usersIndex.html',\n      controller: 'UsersIndexController as usersIndex'\n    })\n    .state('usersShow', {\n      url: '/users/:id',\n      templateUrl: '/templates/usersShow.html',\n      controller: 'UsersShowController as usersShow'\n    })\n    .state('usersEdit', {\n      url: '/users/:id/edit',\n      templateUrl: '/templates/usersEdit.html',\n      controller: 'UsersEditController as usersEdit'\n    })\n    .state('register', {\n      url: '/register',\n      templateUrl: '/templates/register.html',\n      controller: 'RegisterController as register'\n    })\n    .state('login', {\n      url: '/login',\n      templateUrl: '/templates/login.html',\n      controller: 'LoginController as login'\n    });\n\n  $urlRouterProvider.otherwise('/');\n}\n","angular.module('finalProject')\n  .controller('SetupController', SetupController);\n\nSetupController.$inject = ['UserPlan','$state','$window'];\nfunction SetupController(UserPlan, $state, $window) {\n  const setupPlan = this;\n  const moment = $window.moment;\n\n  setupPlan.end_date = new Date(moment().add(6, 'weeks').format('YYYY-MM-DD'));\n\n  function create(){\n    UserPlan.save(setupPlan, () => {\n      $state.go('plansIndex');\n    });\n  }\n\n  setupPlan.create = create;\n}\n","angular.module('finalProject')\n  .controller('StravaIndexController', StravaIndexController);\n\nStravaIndexController.$inject = ['$http', 'StravaService','$auth', 'User','UserPlan','Day', '$window', '$state'];\nfunction StravaIndexController($http, StravaService, $auth, User, UserPlan, Day, $window, $state){\n  const stravaIndex = this;\n  const moment = $window.moment;\n  const userId = $auth.getPayload().id;\n  stravaIndex.allActivities = [];\n  stravaIndex.userDays = [];\n\n  function hasStravaToken () {\n    return !!$window.localStorage.getItem('strava_token');\n  }\n\n  function getStravaToken() {\n    return $window.localStorage.getItem('strava_token');\n  }\n\n  function matchUserDays(stravaData) {\n    for(let i=0;i<stravaData.length;i++) {\n      const userDayIdx = stravaIndex.userDays.findIndex((day) => {\n        return moment(day.date).format('YYYY-MM-DD') === stravaData[i].start_date;\n      });\n\n      if(userDayIdx > 0) {\n        stravaData[i].userDay = stravaIndex.userDays.splice(userDayIdx, 1)[0];\n      }\n    }\n\n    return stravaData;\n  }\n\n  function init() {\n    UserPlan.query({ user_id: userId, active: true }).$promise.then((userPlans) => {\n      stravaIndex.planId = userPlans[0].id;\n\n      stravaIndex.userDays = userPlans[0].user_days;\n      if(hasStravaToken()){\n        return StravaService\n          .activityIndex(getStravaToken());\n      }\n    })\n    .then((stravaData) => {\n      stravaIndex.allActivities = matchUserDays(stravaData || []);\n\n      const completedDays = stravaIndex.userDays.filter((day) => {\n        return day.completed;\n      });\n      // stravaIndex.allActivities.concat(completedDays);\n      stravaIndex.allActivities.push(completedDays[0]);\n\n\n    })\n    .catch((err) => {\n      console.log(err);\n    });\n  }\n\n  function markComplete(planId, dayId, stravaId) {\n    Day.update({id: planId.dayId}, { strava_id: planId.stravaId, completed: true   }, () => {\n      $state.go('daysShow', {planId: planId.planId, dayId: planId.dayId, stravaId: planId.stravaId});\n    });\n  }\n\n  function sync() {\n    if (!hasStravaToken()) {\n      $auth.authenticate('strava')\n        .then((res) => {\n          $window.localStorage.setItem('strava_token', res.data.access_token);\n          const stravaId = res.data.athlete.id;\n          User.update({id: userId}, {strava_id: stravaId}, () => {\n            init();\n          });\n        });\n    } else {\n      init();\n    }\n  }\n\n\n  init();\n  stravaIndex.markComplete = markComplete;\n  stravaIndex.sync = sync;\n}\n","angular.module('finalProject')\n  .service('StravaService', StravaService);\n\nStravaService.$inject = ['$http', '$window'];\nfunction StravaService($http, $window) {\n  const moment = $window.moment;\n\n  function activityIndex(accessToken) {\n\n    return $http({\n      method: 'GET',\n      url: 'http://localhost:3000/api/strava',\n      params: {\n        accessToken\n      }\n    }).then(function successCallback(response) {\n      response.data.forEach((activity) => {\n        activity.start_date = moment(activity.start_date).format('YYYY-MM-DD');\n\n        activity.distance = ((activity.distance / 1000) * 0.621371).toFixed(1);\n\n        activity.elapsed_hours = Math.floor(activity.elapsed_time / 60 /60);\n        activity.elapsed_minutes = Math.floor((activity.elapsed_time / 60) % 60);\n        activity.elapsed_seconds = ((((activity.elapsed_time % 60) * 60).toString().slice(0,2)) % 60);\n\n      });\n\n      return response.data;\n    }, function errorCallback(response) {\n      console.log(response);\n    });\n  }\n\n  function activityShow(accessToken, activityId) {\n\n    return $http({\n      method: 'GET',\n      url: 'http://localhost:3000/api/strava/activity',\n      params: {\n        activityId,\n        accessToken\n      }\n    }).then(function successCallback(response) {\n      response.data.distance = ((response.data.distance / 1000) * 0.621371).toFixed(1);\n\n      response.data.elapsed_minutes = Math.floor(response.data.elapsed_time / 60);\n      response.data.elapsed_seconds = ((response.data.elapsed_time % 60) * 60);\n\n\n      return response.data;\n    }, function errorCallback(response) {\n      console.log(response);\n    });\n  }\n\n  this.activityIndex = activityIndex;\n  this.activityShow = activityShow;\n}\n","angular.module('finalProject')\n  .factory('User', User);\n\nUser.$inject = ['$resource', 'API_URL'];\nfunction User($resource, API_URL) {\n  return new $resource(`${API_URL}/users/:id`, { id: '@id'}, {\n    update: { method: 'PUT'}\n  });\n}\n","angular.module('finalProject')\n  .factory('UserPlan', UserPlan);\n\nUserPlan.$inject = ['$resource', 'API_URL'];\nfunction UserPlan($resource, API_URL) {\n  return new $resource(`${API_URL}/user_plans/:id`, { id: '@id'}, {\n    update: { method: 'PUT'}\n  });\n}\n","angular.module('finalProject')\n  .controller('UsersIndexController', UsersIndexController)\n  .controller('UsersShowController', UsersShowController)\n  .controller('UsersEditController', UsersEditController);\n\nUsersIndexController.$inject = ['User'];\nfunction UsersIndexController(User) {\n  const usersIndex = this;\n\n  usersIndex.all = User.query();\n}\n\nUsersShowController.$inject = ['User', '$state','$auth', '$window'];\nfunction UsersShowController(User, $state, $auth, $window) {\n  const usersShow = this;\n  usersShow.user = User.get($state.params);\n\n  function userDelete() {\n    usersShow.user.$remove(() => {\n      $state.go('usersIndex');\n    });\n  }\n\n  function logout() {\n\n    $auth.logout()\n      .then(() => {\n        $window.localStorage.removeItem('strava_token');\n        $state.go('homepage');\n      });\n  }\n\n  function authenticateStrava() {\n    $auth.authenticate('strava')\n      .then((res) => {\n        $window.localStorage.setItem('strava_token', res.data.access_token);\n\n        usersShow.user.strava_id = res.data.athlete.id;\n\n        User.update(usersShow.user.id, usersShow.user, () => {\n          $state.go('stravaIndex');\n        });\n      });\n  }\n\n  usersShow.logout = logout;\n  usersShow.delete = userDelete;\n  usersShow.authenticateStrava = authenticateStrava;\n}\n\nUsersEditController.$inject = ['User', '$state'];\nfunction UsersEditController(User, $state) {\n  const usersEdit = this;\n\n  usersEdit.user = User.get($state.params);\n\n  function update() {\n    User.update(usersEdit.user.id, usersEdit.user, () => {\n      $state.go('usersShow', $state.params);\n    });\n  }\n\n  usersEdit.update = update;\n}\n","angular.module('finalProject')\n  .controller('WeeksShowController', WeeksShowController)\n  .controller('WeeksEditController', WeeksEditController);\n\nWeeksShowController.$inject = ['UserPlan', '$state', '$window'];\nfunction WeeksShowController(UserPlan, $state, $window) {\n  const weeksShow = this;\n  const moment = $window.moment;\n\n  weeksShow.planId = $state.params.planId;\n  weeksShow.weekId = $state.params.weekId;\n  weeksShow.totalWorkouts = 0;\n  weeksShow.completedWorkouts = 0;\n  weeksShow.totalMiles = 0;\n  weeksShow.completedMiles = 0;\n\n  UserPlan.get({ id: weeksShow.planId, week: weeksShow.weekId}, (week) => {\n    weeksShow.thisWeek = week.user_days;\n\n    weeksShow.thisWeek.forEach((day) => {\n\n      // Get day of week\n      day.dayOfWeekIndex = moment(day.date).day();\n\n      switch (day.dayOfWeekIndex) {\n        case 1:\n          day.dayOfWeek = 'M';\n          break;\n        case 2:\n          day.dayOfWeek = 'T';\n          break;\n        case 3:\n          day.dayOfWeek = 'W';\n          break;\n        case 4:\n          day.dayOfWeek = 'T';\n          break;\n        case 5:\n          day.dayOfWeek = 'F';\n          break;\n        case 6:\n          day.dayOfWeek = 'S';\n          break;\n        case 0:\n          day.dayOfWeek = 'S';\n          break;\n      }\n\n      if (day.exercise) {\n        // Calculate total number of workout days\n        weeksShow.totalWorkouts += 1;\n        weeksShow.totalMiles += day.exercise.miles;\n\n        // Calculate num completed workouts\n        if (day.completed) {\n          weeksShow.completedWorkouts += 1;\n          weeksShow.completedMiles += day.exercise.miles;\n        }\n      }\n    });\n    console.log(weeksShow.thisWeek);\n    weeksShow.totalMiles = Math.floor(weeksShow.totalMiles);\n    weeksShow.completedMiles = Math.floor(weeksShow.completedMiles);\n\n  });\n}\n\nWeeksEditController.$inject = ['UserPlan', '$state', '$window'];\nfunction WeeksEditController(UserPlan, $state, $window) {\n  const weeksEdit = this;\n  const moment = $window.moment;\n\n  weeksEdit.planId = $state.params.planId;\n  weeksEdit.weekId = $state.params.weekId;\n\n  UserPlan.get({ id: weeksEdit.planId, week: weeksEdit.weekId }, (plan) => {\n    weeksEdit.plan = plan;\n\n    plan.user_days.forEach((day) => {\n      // Get day of week\n      day.dayOfWeekIndex = moment(day.date).day();\n\n      switch (day.dayOfWeekIndex) {\n        case 1:\n          day.dayOfWeek = 'M';\n          break;\n        case 2:\n          day.dayOfWeek = 'T';\n          break;\n        case 3:\n          day.dayOfWeek = 'W';\n          break;\n        case 4:\n          day.dayOfWeek = 'T';\n          break;\n        case 5:\n          day.dayOfWeek = 'F';\n          break;\n        case 6:\n          day.dayOfWeek = 'S';\n          break;\n        case 0:\n          day.dayOfWeek = 'S';\n          break;\n      }\n    });\n    weeksEdit.thisWeek = plan.user_days.sort(function(a,b) {\n      return a.position - b.position;\n    });\n    weeksEdit.startingDay = plan.user_days[0];\n  });\n\n  function updatePosition($index){\n    let index = weeksEdit.startingDay.position;\n    weeksEdit.thisWeek.splice($index, 1);\n    weeksEdit.thisWeek.forEach((day) => {\n      day.position = index;\n      index++;\n    });\n  }\n\n  function savePlan(){\n    UserPlan.update(weeksEdit.planId, weeksEdit.plan);\n  }\n\n  weeksEdit.updatePosition = updatePosition;\n  weeksEdit.savePlan = savePlan;\n}\n"]}