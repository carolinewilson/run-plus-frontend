{"version":3,"sources":["js/app.js","js/controllers/auth.js","js/controllers/day.js","js/models/day.js","js/controllers/main.js","js/controllers/plan.js","js/router.js","js/controllers/setup.js","js/controllers/strava.js","js/services/stravaService.js","js/models/user.js","js/models/userPlan.js","js/controllers/users.js","js/controllers/week.js"],"names":["Auth","$authProvider","API_URL","loginUrl","signupUrl","tokenPrefix","oauth2","name","url","clientId","redirectUri","window","location","origin","authorizationEndpoint","RegisterController","$auth","$state","submit","signup","register","user","then","go","this","LoginController","login","credentials","res","data","user_plans","forEach","plan","active","activePlans","DaysIndexController","UserPlan","daysIndex","get","params","DaysShowController","Day","$window","StravaService","markDone","daysShow","day","completed","update","dayId","planId","id","stravaId","accessToken","localStorage","getItem","stravaActivityId","getActivity","successResponse","stravaData","errorResponse","console","log","$resource","method","MainController","User","getUserId","userId","getPayload","logout","main","moment","isLoggedIn","isAuthenticated","hasActivePlan","currentUser","all","activePlan","user_days","date","format","today","PlansIndexController","plansIndex","PlansShowController","plansShow","totalWorkouts","totalMiles","completedWorkouts","completedMiles","labels","series","targetData","actualData","colors","start","start_date","future","numWeeks","length","i","push","targetMiles","actualMiles","week","exercise","miles","currentWeek","Math","floor","PlansEditController","endPlan","plansEdit","deletePlan","remove","PlansNewController","plansNew","userPlans","Router","$stateProvider","$urlRouterProvider","state","templateUrl","controller","otherwise","SetupController","create","save","setupPlan","StravaIndexController","$http","markComplete","strava_id","stravaIndex","userPlanId","userDays","getActivities","response","activity","activityId","UsersIndexController","usersIndex","query","UsersShowController","userDelete","usersShow","$remove","removeItem","authenticateStrava","authenticate","setItem","access_token","athlete","delete","UsersEditController","usersEdit","WeeksShowController","weeksShow","weekId","thisWeek","WeeksEditController","updatePosition","$index","index","weeksEdit","startingDay","position","splice","savePlan","sort","a","b","angular","module","constant","config","$inject","factory","service"],"mappings":"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","file":"app.js","sourcesContent":["angular.module('finalProject', ['ngResource', 'ui.router', 'satellizer','chart.js','dndLists','ngMessages','ngMaterial'])\n  .constant('API_URL', 'http://localhost:3000/api')\n  .config(Auth);\n\nAuth.$inject = ['$authProvider', 'API_URL'];\nfunction Auth($authProvider, API_URL) {\n  $authProvider.loginUrl = `${API_URL}/login`;\n  $authProvider.signupUrl = `${API_URL}/register`;\n\n  $authProvider.tokenPrefix = '';\n\n  $authProvider.oauth2({\n    name: 'strava',\n    url: `${API_URL}/oauth/strava`,\n    clientId: '15120',\n    redirectUri: window.location.origin,\n    authorizationEndpoint: 'https://www.strava.com/oauth/authorize'\n  });\n}\n","angular.module('finalProject')\n  .controller('RegisterController', RegisterController)\n  .controller('LoginController', LoginController);\n\nRegisterController.$inject = ['$auth', '$state'];\nfunction RegisterController($auth, $state) {\n  const register = this;\n\n  register.user = {};\n\n  function submit() {\n    $auth.signup(register.user)\n      .then(() => {\n        $state.go('login');\n      });\n  }\n\n  register.submit = submit;\n}\n\nLoginController.$inject = ['$auth', '$state'];\nfunction LoginController($auth, $state) {\n  const login = this;\n\n  login.credentials = {};\n  login.activePlans = false;\n\n  function submit() {\n    $auth.login(login.credentials)\n      .then((res) => {\n        res.data.user.user_plans.forEach((plan) => {\n          if (plan.active) {\n            login.activePlans = true;\n          }\n        });\n\n        if (login.activePlans) {\n          $state.go('plansIndex');\n        } else {\n          $state.go('setup');\n        }\n      });\n  }\n\n  login.submit = submit;\n}\n","angular.module('finalProject')\n  .controller('DaysIndexController', DaysIndexController)\n  .controller('DaysShowController', DaysShowController);\n\nDaysIndexController.$inject = ['UserPlan', '$state'];\nfunction DaysIndexController(UserPlan, $state) {\n  const daysIndex = this;\n\n  daysIndex.plan = UserPlan.get($state.params);\n}\n\nDaysShowController.$inject = ['Day', '$state', '$window', 'StravaService'];\nfunction DaysShowController(Day, $state, $window, StravaService) {\n  const daysShow = this;\n\n  daysShow.planId = $state.params.planId;\n  daysShow.dayId = $state.params.dayId;\n\n  daysShow.day = Day.get({ id: daysShow.dayId });\n\n  if ($state.params.stravaId) {\n    // Get activities from Strava\n    const accessToken = $window.localStorage.getItem('strava_token');\n    const stravaActivityId = $state.params.stravaId;\n\n\n    StravaService\n      .getActivity(accessToken, stravaActivityId)\n      .then(\n        successResponse => {\n          daysShow.stravaData = successResponse;\n        },\n        errorResponse => {\n          console.log(errorResponse);\n        }\n      );\n  }\n\n  function markDone(){\n    daysShow.day.completed = true;\n    Day.update(daysShow.dayId, daysShow.day);\n  }\n\n  daysShow.markDone = markDone;\n}\n","angular.module('finalProject')\n  .factory('Day', Day);\n\nDay.$inject = ['$resource', 'API_URL'];\nfunction Day($resource, API_URL) {\n  return new $resource(`${API_URL}/user_days/:id`, { id: '@id'}, {\n    update: { method: 'PUT'}\n  });\n}\n","angular.module('finalProject')\n  .controller('MainController', MainController);\n\nMainController.$inject = ['$auth','$state','User','UserPlan', '$window'];\nfunction MainController($auth, $state, User, UserPlan, $window){\n  const main = this;\n  const moment = $window.moment;\n\n  main.isLoggedIn = $auth.isAuthenticated;\n  main.hasActivePlan = false;\n\n  function getUserId() {\n    const userId = $auth.getPayload().id;\n    $state.go('usersShow', {id: userId});\n  }\n\n  if (main.isLoggedIn()) {\n    main.currentUser = $auth.getPayload().id;\n\n    main.all = User.get({id: main.currentUser}, (res) => {\n      res.user_plans.forEach((plan) => {\n        if (plan.active) {\n          main.activePlan = plan.id;\n\n          UserPlan.get({id: plan.id}, (data) => {\n            data.user_days.forEach((day) => {\n              const date = moment(day.date).format('YYYY-MM-DD');\n              const today = moment().format('YYYY-MM-DD');\n              if (date === today) {\n                main.hasActivePlan = true;\n                main.dayId = day.id;\n              }\n            });\n          });\n        }\n      });\n    });\n  }\n\n\n  function logout() {\n    $auth.logout()\n      .then(() => {\n        $state.go('homepage');\n      });\n  }\n\n  main.logout = logout;\n  main.getUserId = getUserId;\n}\n","angular.module('finalProject')\n  .controller('PlansIndexController', PlansIndexController)\n  .controller('PlansShowController', PlansShowController)\n  .controller('PlansEditController', PlansEditController)\n  .controller('PlansNewController', PlansNewController);\n\nPlansIndexController.$inject = ['User', '$auth'];\nfunction PlansIndexController(User, $auth) {\n  const plansIndex = this;\n\n  plansIndex.currentUser = $auth.getPayload().id;\n  plansIndex.all = User.get({id: plansIndex.currentUser}, () => {\n    plansIndex.all.user_plans.forEach((plan) => {\n      if (plan.active) {\n        plansIndex.hasActivePlan = true;\n      }\n    });\n\n  });\n}\n\nPlansShowController.$inject = ['UserPlan' ,'$state','$window'];\nfunction PlansShowController(UserPlan, $state, $window) {\n  const plansShow = this;\n  const moment = $window.moment;\n\n  plansShow.plan = UserPlan.get($state.params, () => {\n\n    plansShow.totalWorkouts = 0;\n    plansShow.totalMiles = 0;\n    plansShow.completedWorkouts = 0;\n    plansShow.completedMiles = 0;\n    plansShow.labels = [];\n    plansShow.series = ['Target', 'Actual'];\n    plansShow.targetData = [];\n    plansShow.actualData =[];\n    plansShow.colors = ['#45b7cd', '#ff6384'];\n\n    // Check if plan has started\n    if (plansShow.plan.active) {\n      const start = moment(plansShow.plan.start_date).format('YYYY-MM-DD');\n      const today =  moment().format('YYYY-MM-DD');\n\n      if (start > today) {\n        plansShow.plan.future = true;\n      }\n    }\n\n    // Set up chart\n    const numWeeks = plansShow.plan.user_days.length / 7;\n    for (var i = 0; i < numWeeks; i++) {\n      plansShow.labels.push(`Week ${i+1}`);\n      plansShow.targetMiles = 0;\n      plansShow.actualMiles = 0;\n\n      // Aggregate weekly mileage\n      plansShow.plan.user_days.forEach((day) => {\n        if (day.week === i + 1) {\n          if (day.exercise) {\n            plansShow.targetMiles += day.exercise.miles;\n          }\n          if (day.completed) {\n            plansShow.actualMiles += day.exercise.miles;\n          }\n        }\n      });\n\n      plansShow.targetData.push(plansShow.targetMiles);\n      plansShow.actualData.push(plansShow.actualMiles);\n    }\n    plansShow.data = [plansShow.targetData, plansShow.actualData];\n\n    plansShow.plan.user_days.forEach((day) => {\n      // Find current week\n      const date =  moment(day.date).format('YYYY-MM-DD');\n      const today = moment().format('YYYY-MM-DD');\n      if (date === today) {\n        plansShow.currentWeek = day.week;\n      }\n\n      if (day.exercise) {\n        // Calculate total number of workout days\n        plansShow.totalWorkouts += 1;\n        plansShow.totalMiles += day.exercise.miles;\n\n        // Calculate num completed workouts\n        if (day.completed) {\n          plansShow.completedWorkouts += 1;\n          plansShow.completedMiles += day.exercise.miles;\n        }\n      }\n    });\n\n    plansShow.totalMiles = Math.floor(plansShow.totalMiles);\n    plansShow.completedMiles = Math.floor(plansShow.completedMiles);\n\n  });\n}\n\nPlansEditController.$inject = ['$state', 'UserPlan'];\nfunction PlansEditController($state, UserPlan) {\n  const plansEdit = this;\n\n  plansEdit.plan = UserPlan.get($state.params);\n\n  function endPlan() {\n    plansEdit.plan.active = false;\n    UserPlan.update($state.params,plansEdit.plan, () => {\n      $state.go('plansIndex');\n    });\n  }\n\n  function deletePlan() {\n    UserPlan.remove($state.params, () => {\n      $state.go('plansIndex');\n    });\n  }\n\n  plansEdit.endPlan = endPlan;\n  plansEdit.deletePlan = deletePlan;\n}\n\n\nPlansNewController.$inject = ['User', 'UserPlan', '$state'];\nfunction PlansNewController(User, UserPlan, $state) {\n  const plansNew = this;\n\n  User.get($state.params, (user) => {\n    plansNew.userPlans = user.user_plans;\n    plansNew.hasActivePlan = false;\n\n    plansNew.userPlans.forEach((plan) => {\n      if (plan.active === true) {\n        plansNew.hasActivePlan = true;\n        plansNew.activePlan = plan;\n      }\n    });\n\n    if (!plansNew.hasActivePlan){\n      $state.go('setup');\n    }\n  });\n\n  function endPlan(id) {\n    plansNew.activePlan.active = false;\n    UserPlan.update(id, plansNew.activePlan, () => {\n      $state.go('setup');\n    });\n  }\n  plansNew.endPlan = endPlan;\n}\n","angular.module('finalProject')\n  .config(Router);\n\nRouter.$inject = ['$stateProvider', '$urlRouterProvider'];\nfunction Router($stateProvider, $urlRouterProvider) {\n  $stateProvider\n    .state('homepage', {\n      url: '/',\n      templateUrl: '/templates/homepage.html',\n      controller: 'MainController as main'\n    })\n    .state('setup', {\n      url: '/setup',\n      templateUrl: '/templates/setup.html',\n      controller: 'SetupController as setupPlan'\n    })\n    .state('plansIndex', {\n      url: '/plans',\n      templateUrl: '/templates/plansIndex.html',\n      controller: 'PlansIndexController as plansIndex'\n    })\n    .state('plansShow', {\n      url: '/plans/:id',\n      templateUrl: '/templates/plansShow.html',\n      controller: 'PlansShowController as plansShow'\n    })\n    .state('plansEdit', {\n      url: '/plans/:id/end',\n      templateUrl: '/templates/plansEdit.html',\n      controller: 'PlansEditController as plansEdit'\n    })\n    .state('plansNew', {\n      url: '/:id/new',\n      templateUrl: '/templates/plansNew.html',\n      controller: 'PlansNewController as plansNew'\n    })\n    .state('weeksShow', {\n      url: '/plans/:planId/weeks/:weekId',\n      templateUrl: '/templates/weeksShow.html',\n      controller: 'WeeksShowController as weeksShow'\n    })\n    .state('weeksEdit', {\n      url: '/plans/:planId/weeks/:weekId/edit',\n      templateUrl: '/templates/weeksEdit.html',\n      controller: 'WeeksEditController as weeksEdit'\n    })\n    .state('daysIndex', {\n      url: '/plans/:id/days',\n      templateUrl: '/templates/daysIndex.html',\n      controller: 'DaysIndexController as daysIndex'\n    })\n    .state('daysShow', {\n      url: '/plans/:planId/days/:dayId?stravaId',\n      templateUrl: '/templates/daysShow.html',\n      controller: 'DaysShowController as daysShow'\n    })\n    .state('stravaIndex', {\n      url: '/strava',\n      templateUrl: '/templates/stravaIndex.html',\n      controller: 'StravaIndexController as stravaIndex'\n    })\n    .state('usersIndex', {\n      url: '/users',\n      templateUrl: '/templates/usersIndex.html',\n      controller: 'UsersIndexController as usersIndex'\n    })\n    .state('usersShow', {\n      url: '/users/:id',\n      templateUrl: '/templates/usersShow.html',\n      controller: 'UsersShowController as usersShow'\n    })\n    .state('usersEdit', {\n      url: '/users/:id/edit',\n      templateUrl: '/templates/usersEdit.html',\n      controller: 'UsersEditController as usersEdit'\n    })\n    .state('register', {\n      url: '/register',\n      templateUrl: '/templates/register.html',\n      controller: 'RegisterController as register'\n    })\n    .state('login', {\n      url: '/login',\n      templateUrl: '/templates/login.html',\n      controller: 'LoginController as login'\n    });\n\n  $urlRouterProvider.otherwise('/');\n}\n","angular.module('finalProject')\n  .controller('SetupController', SetupController);\n\nSetupController.$inject = ['UserPlan','$state'];\nfunction SetupController(UserPlan, $state) {\n  const setupPlan = this;\n\n  function create(){\n    UserPlan.save(setupPlan, () => {\n      $state.go('plansIndex');\n    });\n  }\n\n  setupPlan.create = create;\n}\n","angular.module('finalProject')\n  .controller('StravaIndexController', StravaIndexController);\n\nStravaIndexController.$inject = ['$http', 'StravaService','$auth', 'User','UserPlan','Day', '$window', '$state'];\nfunction StravaIndexController($http, StravaService, $auth, User, UserPlan, Day, $window, $state){\n  const stravaIndex = this;\n  const moment = $window.moment;\n  const userId = $auth.getPayload().id;\n\n  User.get({id: userId}, (res) => {\n    res.user_plans.forEach((plan) => {\n      if (plan.active) {\n        stravaIndex.userPlanId = plan.id;\n        UserPlan.get({id: plan.id }, (data) => {\n          stravaIndex.userDays = data.user_days;\n          data.user_days.forEach((day) => {\n            day.date = moment(day.date).format('YYYY-MM-DD');\n          });\n\n        });\n      }\n    });\n  });\n\n\n  // Get activities from Strava\n  const accessToken = $window.localStorage.getItem('strava_token');\n\n  StravaService\n    .getActivities(accessToken)\n    .then(\n      successResponse => {\n        stravaIndex.data = successResponse;\n      },\n      errorResponse => {\n        console.log(errorResponse);\n      }\n    );\n\n  function markComplete(planId, dayId, stravaId){\n\n    Day.get({id: dayId}, (res) => {\n      res.completed = true;\n      res.strava_id = stravaId;\n\n      Day.update(res, res, () => {\n        $state.go('daysShow', {planId: planId, dayId: dayId, stravaId: stravaId});\n      });\n    });\n  }\n\n  stravaIndex.markComplete = markComplete;\n}\n","angular.module('finalProject')\n  .service('StravaService', StravaService);\n\nStravaService.$inject = ['$http', '$window'];\nfunction StravaService($http, $window) {\n  const moment = $window.moment;\n\n  function getActivities(accessToken) {\n\n    return $http({\n      method: 'GET',\n      url: 'http://localhost:3000/api/strava',\n      params: {\n        accessToken\n      }\n    }).then(function successCallback(response) {\n      response.data.forEach((activity) => {\n        activity.start_date = moment(activity.start_date).format('YYYY-MM-DD');\n      });\n\n      return response.data;\n    }, function errorCallback(response) {\n      console.log(response);\n    });\n  }\n\n  function getActivity(accessToken, activityId) {\n\n    return $http({\n      method: 'GET',\n      url: 'http://localhost:3000/api/strava/activity',\n      params: {\n        activityId,\n        accessToken\n      }\n    }).then(function successCallback(response) {\n      response.data.forEach((activity) => {\n        activity.start_date = moment(activity.start_date).format('YYYY-MM-DD');\n      });\n\n      return response.data;\n    }, function errorCallback(response) {\n      console.log(response);\n    });\n  }\n\n  this.getActivities = getActivities;\n  this.getActivity = getActivity;\n}\n","angular.module('finalProject')\n  .factory('User', User);\n\nUser.$inject = ['$resource', 'API_URL'];\nfunction User($resource, API_URL) {\n  return new $resource(`${API_URL}/users/:id`, { id: '@id'}, {\n    update: { method: 'PUT'}\n  });\n}\n","angular.module('finalProject')\n  .factory('UserPlan', UserPlan);\n\nUserPlan.$inject = ['$resource', 'API_URL'];\nfunction UserPlan($resource, API_URL) {\n  return new $resource(`${API_URL}/user_plans/:id`, { id: '@id'}, {\n    update: { method: 'PUT'}\n  });\n}\n","angular.module('finalProject')\n  .controller('UsersIndexController', UsersIndexController)\n  .controller('UsersShowController', UsersShowController)\n  .controller('UsersEditController', UsersEditController);\n\nUsersIndexController.$inject = ['User'];\nfunction UsersIndexController(User) {\n  const usersIndex = this;\n\n  usersIndex.all = User.query();\n}\n\nUsersShowController.$inject = ['User', '$state','$auth', '$window'];\nfunction UsersShowController(User, $state, $auth, $window) {\n  const usersShow = this;\n  usersShow.user = User.get($state.params);\n\n  function userDelete() {\n    usersShow.user.$remove(() => {\n      $state.go('usersIndex');\n    });\n  }\n\n  function logout() {\n\n    $auth.logout()\n      .then(() => {\n        $window.localStorage.removeItem('strava_token');\n        $state.go('homepage');\n      });\n  }\n\n  function authenticateStrava() {\n    $auth.authenticate('strava')\n      .then((res) => {\n        $window.localStorage.setItem('strava_token', res.data.access_token);\n\n        usersShow.user.strava_id = res.data.athlete.id;\n\n        User.update(usersShow.user.id, usersShow.user, () => {\n          $state.go('stravaIndex');\n        });\n      });\n  }\n\n  usersShow.logout = logout;\n  usersShow.delete = userDelete;\n  usersShow.authenticateStrava = authenticateStrava;\n}\n\nUsersEditController.$inject = ['User', '$state'];\nfunction UsersEditController(User, $state) {\n  const usersEdit = this;\n\n  usersEdit.user = User.get($state.params);\n\n  function update() {\n    User.update(usersEdit.user.id, usersEdit.user, () => {\n      $state.go('usersShow', $state.params);\n    });\n  }\n\n  usersEdit.update = update;\n}\n","angular.module('finalProject')\n  .controller('WeeksShowController', WeeksShowController)\n  .controller('WeeksEditController', WeeksEditController);\n\nWeeksShowController.$inject = ['UserPlan', '$state'];\nfunction WeeksShowController(UserPlan, $state) {\n  const weeksShow = this;\n\n  weeksShow.planId = $state.params.planId;\n  weeksShow.weekId = $state.params.weekId;\n  weeksShow.totalWorkouts = 0;\n  weeksShow.completedWorkouts = 0;\n  weeksShow.totalMiles = 0;\n  weeksShow.completedMiles = 0;\n\n  UserPlan.get({ id: weeksShow.planId, week: weeksShow.weekId}, (week) => {\n    weeksShow.thisWeek = week.user_days;\n\n    weeksShow.thisWeek.forEach((day) => {\n      if (day.exercise) {\n        // Calculate total number of workout days\n        weeksShow.totalWorkouts += 1;\n        weeksShow.totalMiles += day.exercise.miles;\n\n        // Calculate num completed workouts\n        if (day.completed) {\n          weeksShow.completedWorkouts += 1;\n          weeksShow.completedMiles += day.exercise.miles;\n        }\n      }\n    });\n\n    weeksShow.totalMiles = Math.floor(weeksShow.totalMiles);\n    weeksShow.completedMiles = Math.floor(weeksShow.completedMiles);\n\n  });\n}\n\nWeeksEditController.$inject = ['UserPlan', '$state'];\nfunction WeeksEditController(UserPlan, $state) {\n  const weeksEdit = this;\n\n  weeksEdit.planId = $state.params.planId;\n  weeksEdit.weekId = $state.params.weekId;\n\n  UserPlan.get({ id: weeksEdit.planId, week: weeksEdit.weekId }, (plan) => {\n    weeksEdit.plan = plan;\n    weeksEdit.thisWeek = plan.user_days.sort(function(a,b) {\n      return a.position - b.position;\n    });\n    weeksEdit.startingDay = plan.user_days[0];\n  });\n\n  function updatePosition($index){\n    let index = weeksEdit.startingDay.position;\n    weeksEdit.thisWeek.splice($index, 1);\n    weeksEdit.thisWeek.forEach((day) => {\n      day.position = index;\n      index++;\n    });\n  }\n\n  function savePlan(){\n    UserPlan.update(weeksEdit.planId, weeksEdit.plan);\n  }\n\n  weeksEdit.updatePosition = updatePosition;\n  weeksEdit.savePlan = savePlan;\n}\n"]}