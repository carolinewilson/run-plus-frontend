{"version":3,"sources":["js/app.js","js/controllers/auth.js","js/controllers/day.js","js/models/day.js","js/controllers/main.js","js/controllers/plan.js","js/router.js","js/controllers/setup.js","js/models/user.js","js/models/userPlan.js","js/controllers/users.js"],"names":["Auth","$authProvider","API_URL","loginUrl","signupUrl","tokenPrefix","RegisterController","$auth","$state","submit","signup","register","user","then","go","this","LoginController","login","credentials","DaysIndexController","UserPlan","daysIndex","plan","get","params","DaysShowController","Day","markDone","console","log","daysShow","planId","dayId","day","id","$resource","update","method","MainController","logout","main","isLoggedIn","isAuthenticated","PlansIndexController","User","plansIndex","currentUser","getPayload","all","query","PlansShowController","plansShow","totalWorkouts","completedWorkouts","user_days","forEach","exercise","completed","totalMiles","completedMiles","miles","Math","floor","Router","$stateProvider","$urlRouterProvider","state","url","templateUrl","controller","otherwise","SetupController","create","save","setupPlan","UsersIndexController","usersIndex","UsersShowController","userDelete","usersShow","$remove","delete","UsersEditController","usersEdit","angular","module","constant","config","$inject","factory"],"mappings":"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","file":"app.js","sourcesContent":["angular.module('finalProject', ['ngResource', 'ui.router', 'satellizer'])\n  .constant('API_URL', 'http://localhost:3000/api')\n  .config(Auth);\n\nAuth.$inject = ['$authProvider', 'API_URL'];\nfunction Auth($authProvider, API_URL) {\n  $authProvider.loginUrl = `${API_URL}/login`;\n  $authProvider.signupUrl = `${API_URL}/register`;\n\n  $authProvider.tokenPrefix = '';\n}\n","angular.module('finalProject')\n  .controller('RegisterController', RegisterController)\n  .controller('LoginController', LoginController);\n\nRegisterController.$inject = ['$auth', '$state'];\nfunction RegisterController($auth, $state) {\n  const register = this;\n\n  register.user = {};\n\n  function submit() {\n    $auth.signup(register.user)\n      .then(() => {\n        $state.go('setup');\n      });\n  }\n\n  register.submit = submit;\n}\n\nLoginController.$inject = ['$auth', '$state'];\nfunction LoginController($auth, $state) {\n  const login = this;\n\n  login.credentials = {};\n\n  function submit() {\n    $auth.login(login.credentials)\n      .then(() => {\n        $state.go('setup');\n      });\n  }\n\n  login.submit = submit;\n}\n","angular.module('finalProject')\n  .controller('DaysIndexController', DaysIndexController)\n  .controller('DaysShowController', DaysShowController);\n\nDaysIndexController.$inject = ['UserPlan', '$state'];\nfunction DaysIndexController(UserPlan, $state) {\n  const daysIndex = this;\n\n  daysIndex.plan = UserPlan.get($state.params, () => {\n  });\n}\n\nDaysShowController.$inject = ['Day', '$state'];\nfunction DaysShowController(Day, $state) {\n  const daysShow = this;\n\n  daysShow.planId = $state.params.planId;\n  daysShow.dayId = $state.params.dayId;\n\n  daysShow.day = Day.get({ id: daysShow.dayId });\n\n  function markDone(){\n    console.log('clicked');\n  }\n\n  daysShow.markDone = markDone;\n}\n","angular.module('finalProject')\n  .factory('Day', Day);\n\nDay.$inject = ['$resource', 'API_URL'];\nfunction Day($resource, API_URL) {\n  return new $resource(`${API_URL}/user_days/:id`, { id: '@id'}, {\n    update: { method: 'PUT'}\n  });\n}\n","angular.module('finalProject')\n  .controller('MainController', MainController);\n\nMainController.$inject = ['$auth','$state'];\nfunction MainController($auth, $state){\n  const main = this;\n\n  main.isLoggedIn = $auth.isAuthenticated;\n\n  function logout() {\n    $auth.logout()\n      .then(() => {\n        // $window.localStorage.removeItem('token');\n        $state.go('login');\n      });\n  }\n  main.logout = logout;\n}\n","angular.module('finalProject')\n  .controller('PlansIndexController', PlansIndexController)\n  .controller('PlansShowController', PlansShowController);\n\nPlansIndexController.$inject = ['User', '$auth'];\nfunction PlansIndexController(User, $auth) {\n  const plansIndex = this;\n\n  plansIndex.currentUser = $auth.getPayload().id;\n\n  plansIndex.all = User.query();\n}\n\nPlansShowController.$inject = ['UserPlan' ,'$state'];\nfunction PlansShowController(UserPlan, $state) {\n  const plansShow = this;\n\n  plansShow.plan = UserPlan.get($state.params, () => {\n\n    plansShow.totalWorkouts = 0;\n    plansShow.completedWorkouts = 0;\n\n    plansShow.plan.user_days.forEach((day) => {\n      // Calculate total number of workout days\n      if (day.exercise) {\n        plansShow.totalWorkouts += 1;\n\n        // Calculate num completed workouts\n        if (day.completed) {\n          plansShow.completedWorkouts += 1;\n        }\n      }\n    });\n\n    // Calculate total milage of plan\n    plansShow.totalMiles = 0;\n    plansShow.completedMiles = 0;\n\n    plansShow.plan.user_days.forEach((day) => {\n      if (day.exercise) {\n        plansShow.totalMiles += day.exercise.miles;\n\n        // Calculate num completed miles\n        if (day.completed) {\n          plansShow.completedMiles += day.exercise.miles;\n        }\n      }\n    });\n\n    plansShow.totalMiles = Math.floor(plansShow.totalMiles);\n    plansShow.completedMiles = Math.floor(plansShow.completedMiles);\n\n  });\n}\n","angular.module('finalProject')\n  .config(Router);\n\nRouter.$inject = ['$stateProvider', '$urlRouterProvider'];\nfunction Router($stateProvider, $urlRouterProvider) {\n  $stateProvider\n    .state('homepage', {\n      url: '/',\n      templateUrl: '/templates/homepage.html',\n      controller: 'MainController as main'\n    })\n    .state('setup', {\n      url: '/setup',\n      templateUrl: '/templates/setup.html',\n      controller: 'SetupController as setupPlan'\n    })\n    .state('plansIndex', {\n      url: '/plans',\n      templateUrl: '/templates/plansIndex.html',\n      controller: 'PlansIndexController as plansIndex'\n    })\n    .state('plansShow', {\n      url: '/plans/:id',\n      templateUrl: '/templates/plansShow.html',\n      controller: 'PlansShowController as plansShow'\n    })\n    .state('daysIndex', {\n      url: '/plans/:id/days',\n      templateUrl: '/templates/daysIndex.html',\n      controller: 'DaysIndexController as daysIndex'\n    })\n    .state('daysShow', {\n      url: '/plans/:planId/days/:dayId',\n      templateUrl: '/templates/daysShow.html',\n      controller: 'DaysShowController as daysShow'\n    })\n    .state('usersIndex', {\n      url: '/users',\n      templateUrl: '/templates/usersIndex.html',\n      controller: 'UsersIndexController as usersIndex'\n    })\n    .state('usersShow', {\n      url: '/users/:id',\n      templateUrl: '/templates/usersShow.html',\n      controller: 'UsersShowController as usersShow'\n    })\n    .state('usersEdit', {\n      url: '/users/:id/edit',\n      templateUrl: '/templates/usersEdit.html',\n      controller: 'UsersEditController as usersEdit'\n    })\n    .state('register', {\n      url: '/register',\n      templateUrl: '/templates/register.html',\n      controller: 'RegisterController as register'\n    })\n    .state('login', {\n      url: '/login',\n      templateUrl: '/templates/login.html',\n      controller: 'LoginController as login'\n    });\n\n  $urlRouterProvider.otherwise('/users');\n}\n","angular.module('finalProject')\n  .controller('SetupController', SetupController);\n\nSetupController.$inject = ['UserPlan','$state'];\nfunction SetupController(UserPlan, $state) {\n  const setupPlan = this;\n\n  function create(){\n    UserPlan.save(setupPlan, () => {\n      $state.go('plan');\n    });\n  }\n\n  setupPlan.create = create;\n}\n","angular.module('finalProject')\n  .factory('User', User);\n\nUser.$inject = ['$resource', 'API_URL'];\nfunction User($resource, API_URL) {\n  return new $resource(`${API_URL}/users/:id`, { id: '@id'}, {\n    update: { method: 'PUT'}\n  });\n}\n","angular.module('finalProject')\n  .factory('UserPlan', UserPlan);\n\nUserPlan.$inject = ['$resource', 'API_URL'];\nfunction UserPlan($resource, API_URL) {\n  return new $resource(`${API_URL}/user_plans/:id`, { id: '@id'}, {\n    update: { method: 'PUT'}\n  });\n}\n","angular.module('finalProject')\n  .controller('UsersIndexController', UsersIndexController)\n  .controller('UsersShowController', UsersShowController)\n  .controller('UsersEditController', UsersEditController);\n\nUsersIndexController.$inject = ['User'];\nfunction UsersIndexController(User) {\n  const usersIndex = this;\n\n  usersIndex.all = User.query();\n}\n\nUsersShowController.$inject = ['User', '$state'];\nfunction UsersShowController(User, $state) {\n  const usersShow = this;\n  usersShow.user = User.get($state.params);\n\n  function userDelete() {\n    usersShow.user.$remove(() => {\n      $state.go('usersIndex');\n    });\n  }\n  usersShow.delete = userDelete;\n}\n\nUsersEditController.$inject = ['User', '$state'];\nfunction UsersEditController(User, $state) {\n  const usersEdit = this;\n\n  usersEdit.user = User.get($state.params);\n\n  function update() {\n    User.update(usersEdit.user.id, usersEdit.user, () => {\n      $state.go('usersShow', $state.params);\n    });\n  }\n\n  usersEdit.update = update;\n}\n"]}