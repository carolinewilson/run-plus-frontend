{"version":3,"sources":["js/app.js","js/controllers/auth.js","js/models/day.js","js/controllers/day.js","js/controllers/main.js","js/controllers/plan.js","js/router.js","js/controllers/setup.js","js/models/user.js","js/models/userPlan.js","js/controllers/users.js","js/controllers/week.js"],"names":["Auth","$authProvider","API_URL","loginUrl","signupUrl","tokenPrefix","RegisterController","$auth","$state","submit","signup","register","user","then","go","this","LoginController","login","credentials","res","data","user_plans","forEach","plan","active","activePlans","Day","$resource","id","update","method","DaysIndexController","UserPlan","daysIndex","get","params","DaysShowController","markDone","daysShow","day","completed","dayId","planId","MainController","logout","main","isLoggedIn","isAuthenticated","currentUser","getPayload","PlansIndexController","User","plansIndex","all","PlansShowController","$window","plansShow","moment","totalWorkouts","totalMiles","completedWorkouts","completedMiles","labels","series","targetData","actualData","colors","numWeeks","user_days","length","i","push","targetMiles","actualMiles","week","exercise","miles","date","format","today","currentWeek","Math","floor","Router","$stateProvider","$urlRouterProvider","state","url","templateUrl","controller","otherwise","SetupController","$scope","create","save","setupPlan","myDate","Date","minDate","getFullYear","getMonth","getDate","maxDate","onlyWeekendsPredicate","getDay","UsersIndexController","usersIndex","query","UsersShowController","userDelete","usersShow","$remove","delete","UsersEditController","usersEdit","WeeksShowController","weeksShow","weekId","thisWeek","WeeksEditController","updatePosition","$index","index","weeksEdit","startingDay","position","splice","savePlan","sort","a","b","angular","module","constant","config","$inject","factory"],"mappings":"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","file":"app.js","sourcesContent":["angular.module('finalProject', ['ngResource', 'ui.router', 'satellizer','chart.js','dndLists','ngMessages','ngMaterial'])\n  .constant('API_URL', 'http://localhost:3000/api')\n  .config(Auth);\n\nAuth.$inject = ['$authProvider', 'API_URL'];\nfunction Auth($authProvider, API_URL) {\n  $authProvider.loginUrl = `${API_URL}/login`;\n  $authProvider.signupUrl = `${API_URL}/register`;\n\n  $authProvider.tokenPrefix = '';\n}\n","angular.module('finalProject')\n  .controller('RegisterController', RegisterController)\n  .controller('LoginController', LoginController);\n\nRegisterController.$inject = ['$auth', '$state'];\nfunction RegisterController($auth, $state) {\n  const register = this;\n\n  register.user = {};\n\n  function submit() {\n    $auth.signup(register.user)\n      .then(() => {\n        $state.go('login');\n      });\n  }\n\n  register.submit = submit;\n}\n\nLoginController.$inject = ['$auth', '$state'];\nfunction LoginController($auth, $state) {\n  const login = this;\n\n  login.credentials = {};\n  login.activePlans = false;\n\n  function submit() {\n    $auth.login(login.credentials)\n      .then((res) => {\n        res.data.user.user_plans.forEach((plan) => {\n          if (plan.active) {\n            login.activePlans = true;\n          }\n        });\n\n        if (login.activePlans) {\n          $state.go('plansIndex');\n        } else {\n          $state.go('setup');\n        }\n      });\n  }\n\n  login.submit = submit;\n}\n","angular.module('finalProject')\n  .factory('Day', Day);\n\nDay.$inject = ['$resource', 'API_URL'];\nfunction Day($resource, API_URL) {\n  return new $resource(`${API_URL}/user_days/:id`, { id: '@id'}, {\n    update: { method: 'PUT'}\n  });\n}\n","angular.module('finalProject')\n  .controller('DaysIndexController', DaysIndexController)\n  .controller('DaysShowController', DaysShowController);\n\nDaysIndexController.$inject = ['UserPlan', '$state'];\nfunction DaysIndexController(UserPlan, $state) {\n  const daysIndex = this;\n\n  daysIndex.plan = UserPlan.get($state.params);\n}\n\nDaysShowController.$inject = ['Day', '$state'];\nfunction DaysShowController(Day, $state) {\n  const daysShow = this;\n\n  daysShow.planId = $state.params.planId;\n  daysShow.dayId = $state.params.dayId;\n\n  daysShow.day = Day.get({ id: daysShow.dayId });\n\n  function markDone(){\n    daysShow.day.completed = true;\n    Day.update(daysShow.dayId, daysShow.day);\n  }\n\n  daysShow.markDone = markDone;\n}\n","angular.module('finalProject')\n  .controller('MainController', MainController);\n\nMainController.$inject = ['$auth','$state'];\nfunction MainController($auth, $state){\n  const main = this;\n\n  main.isLoggedIn = $auth.isAuthenticated;\n\n  if (main.isLoggedIn()) {\n    main.currentUser = $auth.getPayload().id;\n  }\n\n  function logout() {\n    $auth.logout()\n      .then(() => {\n        $state.go('homepage');\n      });\n  }\n  main.logout = logout;\n}\n","angular.module('finalProject')\n  .controller('PlansIndexController', PlansIndexController)\n  .controller('PlansShowController', PlansShowController);\n\nPlansIndexController.$inject = ['User', '$auth'];\nfunction PlansIndexController(User, $auth) {\n  const plansIndex = this;\n\n  plansIndex.currentUser = $auth.getPayload().id;\n  plansIndex.all = User.get({id: plansIndex.currentUser});\n}\n\nPlansShowController.$inject = ['UserPlan' ,'$state','$window'];\nfunction PlansShowController(UserPlan, $state, $window) {\n  const plansShow = this;\n  const moment = $window.moment;\n\n  plansShow.plan = UserPlan.get($state.params, () => {\n\n    plansShow.totalWorkouts = 0;\n    plansShow.totalMiles = 0;\n    plansShow.completedWorkouts = 0;\n    plansShow.completedMiles = 0;\n    plansShow.labels = [];\n    plansShow.series = ['Target', 'Actual'];\n    plansShow.targetData = [];\n    plansShow.actualData =[];\n    plansShow.colors = ['#45b7cd', '#ff6384'];\n\n    // Set up chart\n    const numWeeks = plansShow.plan.user_days.length / 7;\n    for (var i = 0; i < numWeeks; i++) {\n      plansShow.labels.push(`Week ${i+1}`);\n      plansShow.targetMiles = 0;\n      plansShow.actualMiles = 0;\n\n      // Aggregate weekly mileage\n      plansShow.plan.user_days.forEach((day) => {\n        if (day.week === i + 1) {\n          if (day.exercise) {\n            plansShow.targetMiles += day.exercise.miles;\n          }\n          if (day.completed) {\n            plansShow.actualMiles += day.exercise.miles;\n          }\n        }\n      });\n\n      plansShow.targetData.push(plansShow.targetMiles);\n      plansShow.actualData.push(plansShow.actualMiles);\n    }\n    plansShow.data = [plansShow.targetData, plansShow.actualData];\n\n    plansShow.plan.user_days.forEach((day) => {\n      // Find current week\n      const date =  moment(day.date).format('YYYY-MM-DD');\n      const today = moment().format('YYYY-MM-DD');\n      if (date === today) {\n        plansShow.currentWeek = day.week;\n      }\n\n      if (day.exercise) {\n        // Calculate total number of workout days\n        plansShow.totalWorkouts += 1;\n        plansShow.totalMiles += day.exercise.miles;\n\n        // Calculate num completed workouts\n        if (day.completed) {\n          plansShow.completedWorkouts += 1;\n          plansShow.completedMiles += day.exercise.miles;\n        }\n      }\n    });\n\n    plansShow.totalMiles = Math.floor(plansShow.totalMiles);\n    plansShow.completedMiles = Math.floor(plansShow.completedMiles);\n\n  });\n}\n","angular.module('finalProject')\n  .config(Router);\n\nRouter.$inject = ['$stateProvider', '$urlRouterProvider'];\nfunction Router($stateProvider, $urlRouterProvider) {\n  $stateProvider\n    .state('homepage', {\n      url: '/',\n      templateUrl: '/templates/homepage.html',\n      controller: 'MainController as main'\n    })\n    .state('setup', {\n      url: '/setup',\n      templateUrl: '/templates/setup.html',\n      controller: 'SetupController as setupPlan'\n    })\n    .state('plansIndex', {\n      url: '/plans',\n      templateUrl: '/templates/plansIndex.html',\n      controller: 'PlansIndexController as plansIndex'\n    })\n    .state('plansShow', {\n      url: '/plans/:id',\n      templateUrl: '/templates/plansShow.html',\n      controller: 'PlansShowController as plansShow'\n    })\n    .state('weeksShow', {\n      url: '/plans/:planId/weeks/:weekId',\n      templateUrl: '/templates/weeksShow.html',\n      controller: 'WeeksShowController as weeksShow'\n    })\n    .state('weeksEdit', {\n      url: '/plans/:planId/weeks/:weekId/edit',\n      templateUrl: '/templates/weeksEdit.html',\n      controller: 'WeeksEditController as weeksEdit'\n    })\n    .state('daysIndex', {\n      url: '/plans/:id/days',\n      templateUrl: '/templates/daysIndex.html',\n      controller: 'DaysIndexController as daysIndex'\n    })\n    .state('daysShow', {\n      url: '/plans/:planId/days/:dayId',\n      templateUrl: '/templates/daysShow.html',\n      controller: 'DaysShowController as daysShow'\n    })\n    .state('usersIndex', {\n      url: '/users',\n      templateUrl: '/templates/usersIndex.html',\n      controller: 'UsersIndexController as usersIndex'\n    })\n    .state('usersShow', {\n      url: '/users/:id',\n      templateUrl: '/templates/usersShow.html',\n      controller: 'UsersShowController as usersShow'\n    })\n    .state('usersEdit', {\n      url: '/users/:id/edit',\n      templateUrl: '/templates/usersEdit.html',\n      controller: 'UsersEditController as usersEdit'\n    })\n    .state('register', {\n      url: '/register',\n      templateUrl: '/templates/register.html',\n      controller: 'RegisterController as register'\n    })\n    .state('login', {\n      url: '/login',\n      templateUrl: '/templates/login.html',\n      controller: 'LoginController as login'\n    });\n\n  $urlRouterProvider.otherwise('/');\n}\n","angular.module('finalProject')\n  .controller('SetupController', SetupController);\n\nSetupController.$inject = ['UserPlan','$state','$scope'];\nfunction SetupController(UserPlan, $state, $scope) {\n  const setupPlan = this;\n\n  function create(){\n    UserPlan.save(setupPlan, () => {\n      $state.go('plansIndex');\n    });\n  }\n\n  // Date Picker\n  $scope.myDate = new Date();\n\n  $scope.minDate = new Date(\n    $scope.myDate.getFullYear(),\n    $scope.myDate.getMonth() - 2,\n    $scope.myDate.getDate());\n\n  $scope.maxDate = new Date(\n    $scope.myDate.getFullYear(),\n    $scope.myDate.getMonth() + 2,\n    $scope.myDate.getDate());\n\n  $scope.onlyWeekendsPredicate = function(date) {\n    var day = date.getDay();\n    return day === 0 || day === 6;\n  };\n\n  setupPlan.create = create;\n}\n","angular.module('finalProject')\n  .factory('User', User);\n\nUser.$inject = ['$resource', 'API_URL'];\nfunction User($resource, API_URL) {\n  return new $resource(`${API_URL}/users/:id`, { id: '@id'}, {\n    update: { method: 'PUT'}\n  });\n}\n","angular.module('finalProject')\n  .factory('UserPlan', UserPlan);\n\nUserPlan.$inject = ['$resource', 'API_URL'];\nfunction UserPlan($resource, API_URL) {\n  return new $resource(`${API_URL}/user_plans/:id`, { id: '@id'}, {\n    update: { method: 'PUT'}\n  });\n}\n","angular.module('finalProject')\n  .controller('UsersIndexController', UsersIndexController)\n  .controller('UsersShowController', UsersShowController)\n  .controller('UsersEditController', UsersEditController);\n\nUsersIndexController.$inject = ['User'];\nfunction UsersIndexController(User) {\n  const usersIndex = this;\n\n  usersIndex.all = User.query();\n}\n\nUsersShowController.$inject = ['User', '$state'];\nfunction UsersShowController(User, $state) {\n  const usersShow = this;\n  usersShow.user = User.get($state.params);\n\n  function userDelete() {\n    usersShow.user.$remove(() => {\n      $state.go('usersIndex');\n    });\n  }\n  usersShow.delete = userDelete;\n}\n\nUsersEditController.$inject = ['User', '$state'];\nfunction UsersEditController(User, $state) {\n  const usersEdit = this;\n\n  usersEdit.user = User.get($state.params);\n\n  function update() {\n    User.update(usersEdit.user.id, usersEdit.user, () => {\n      $state.go('usersShow', $state.params);\n    });\n  }\n\n  usersEdit.update = update;\n}\n","angular.module('finalProject')\n  .controller('WeeksShowController', WeeksShowController)\n  .controller('WeeksEditController', WeeksEditController);\n\nWeeksShowController.$inject = ['UserPlan', '$state'];\nfunction WeeksShowController(UserPlan, $state) {\n  const weeksShow = this;\n\n  weeksShow.planId = $state.params.planId;\n  weeksShow.weekId = $state.params.weekId;\n  weeksShow.totalWorkouts = 0;\n  weeksShow.completedWorkouts = 0;\n  weeksShow.totalMiles = 0;\n  weeksShow.completedMiles = 0;\n\n  UserPlan.get({ id: weeksShow.planId, week: weeksShow.weekId}, (week) => {\n    weeksShow.thisWeek = week.user_days;\n\n    weeksShow.thisWeek.forEach((day) => {\n      if (day.exercise) {\n        // Calculate total number of workout days\n        weeksShow.totalWorkouts += 1;\n        weeksShow.totalMiles += day.exercise.miles;\n\n        // Calculate num completed workouts\n        if (day.completed) {\n          weeksShow.completedWorkouts += 1;\n          weeksShow.completedMiles += day.exercise.miles;\n        }\n      }\n    });\n\n    weeksShow.totalMiles = Math.floor(weeksShow.totalMiles);\n    weeksShow.completedMiles = Math.floor(weeksShow.completedMiles);\n\n  });\n}\n\nWeeksEditController.$inject = ['UserPlan', '$state'];\nfunction WeeksEditController(UserPlan, $state) {\n  const weeksEdit = this;\n\n  weeksEdit.planId = $state.params.planId;\n  weeksEdit.weekId = $state.params.weekId;\n\n  UserPlan.get({ id: weeksEdit.planId, week: weeksEdit.weekId }, (plan) => {\n    weeksEdit.plan = plan;\n    weeksEdit.thisWeek = plan.user_days.sort(function(a,b) {\n      return a.position - b.position;\n    });\n    weeksEdit.startingDay = plan.user_days[0];\n  });\n\n  function updatePosition($index){\n    let index = weeksEdit.startingDay.position;\n    weeksEdit.thisWeek.splice($index, 1);\n    weeksEdit.thisWeek.forEach((day) => {\n      day.position = index;\n      index++;\n    });\n  }\n\n  function savePlan(){\n    UserPlan.update(weeksEdit.planId, weeksEdit.plan);\n  }\n\n  weeksEdit.updatePosition = updatePosition;\n  weeksEdit.savePlan = savePlan;\n}\n"]}