{"version":3,"sources":["js/app.js","js/controllers/auth.js","js/controllers/day.js","js/models/day.js","js/controllers/main.js","js/controllers/plan.js","js/router.js","js/controllers/setup.js","js/models/user.js","js/models/userPlan.js","js/controllers/users.js","js/controllers/week.js"],"names":["Auth","$authProvider","API_URL","loginUrl","signupUrl","tokenPrefix","RegisterController","$auth","$state","submit","signup","register","user","then","go","this","LoginController","login","credentials","res","data","user_plans","forEach","plan","active","activePlans","DaysIndexController","UserPlan","daysIndex","get","params","DaysShowController","Day","markDone","daysShow","day","completed","update","dayId","planId","id","$resource","method","MainController","User","$window","logout","main","moment","isLoggedIn","isAuthenticated","hasActivePlan","currentUser","getPayload","all","activePlan","user_days","date","format","today","PlansIndexController","plansIndex","PlansShowController","plansShow","totalWorkouts","totalMiles","completedWorkouts","completedMiles","labels","series","targetData","actualData","colors","start","start_date","future","numWeeks","length","i","push","targetMiles","actualMiles","week","exercise","miles","currentWeek","Math","floor","PlansEditController","endPlan","plansEdit","deletePlan","remove","PlansNewController","plansNew","userPlans","Router","$stateProvider","$urlRouterProvider","state","url","templateUrl","controller","otherwise","SetupController","$scope","create","save","setupPlan","UsersIndexController","usersIndex","query","UsersShowController","userDelete","usersShow","$remove","delete","UsersEditController","usersEdit","WeeksShowController","weeksShow","weekId","thisWeek","WeeksEditController","updatePosition","$index","index","weeksEdit","startingDay","position","splice","savePlan","sort","a","b","angular","module","constant","config","$inject","factory"],"mappings":"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","file":"app.js","sourcesContent":["angular.module('finalProject', ['ngResource', 'ui.router', 'satellizer','chart.js','dndLists','ngMessages','ngMaterial'])\n  .constant('API_URL', 'http://localhost:3000/api')\n  .config(Auth);\n\nAuth.$inject = ['$authProvider', 'API_URL'];\nfunction Auth($authProvider, API_URL) {\n  $authProvider.loginUrl = `${API_URL}/login`;\n  $authProvider.signupUrl = `${API_URL}/register`;\n\n  $authProvider.tokenPrefix = '';\n}\n","angular.module('finalProject')\n  .controller('RegisterController', RegisterController)\n  .controller('LoginController', LoginController);\n\nRegisterController.$inject = ['$auth', '$state'];\nfunction RegisterController($auth, $state) {\n  const register = this;\n\n  register.user = {};\n\n  function submit() {\n    $auth.signup(register.user)\n      .then(() => {\n        $state.go('login');\n      });\n  }\n\n  register.submit = submit;\n}\n\nLoginController.$inject = ['$auth', '$state'];\nfunction LoginController($auth, $state) {\n  const login = this;\n\n  login.credentials = {};\n  login.activePlans = false;\n\n  function submit() {\n    $auth.login(login.credentials)\n      .then((res) => {\n        res.data.user.user_plans.forEach((plan) => {\n          if (plan.active) {\n            login.activePlans = true;\n          }\n        });\n\n        if (login.activePlans) {\n          $state.go('plansIndex');\n        } else {\n          $state.go('setup');\n        }\n      });\n  }\n\n  login.submit = submit;\n}\n","angular.module('finalProject')\n  .controller('DaysIndexController', DaysIndexController)\n  .controller('DaysShowController', DaysShowController);\n\nDaysIndexController.$inject = ['UserPlan', '$state'];\nfunction DaysIndexController(UserPlan, $state) {\n  const daysIndex = this;\n\n  daysIndex.plan = UserPlan.get($state.params);\n}\n\nDaysShowController.$inject = ['Day', '$state'];\nfunction DaysShowController(Day, $state) {\n  const daysShow = this;\n\n  daysShow.planId = $state.params.planId;\n  daysShow.dayId = $state.params.dayId;\n\n  daysShow.day = Day.get({ id: daysShow.dayId });\n\n  function markDone(){\n    daysShow.day.completed = true;\n    Day.update(daysShow.dayId, daysShow.day);\n  }\n\n  daysShow.markDone = markDone;\n}\n","angular.module('finalProject')\n  .factory('Day', Day);\n\nDay.$inject = ['$resource', 'API_URL'];\nfunction Day($resource, API_URL) {\n  return new $resource(`${API_URL}/user_days/:id`, { id: '@id'}, {\n    update: { method: 'PUT'}\n  });\n}\n","angular.module('finalProject')\n  .controller('MainController', MainController);\n\nMainController.$inject = ['$auth','$state','User','UserPlan', '$window'];\nfunction MainController($auth, $state, User, UserPlan, $window){\n  const main = this;\n  const moment = $window.moment;\n\n  main.isLoggedIn = $auth.isAuthenticated;\n  main.hasActivePlan = false;\n\n  if (main.isLoggedIn()) {\n    main.currentUser = $auth.getPayload().id;\n\n    main.all = User.get({id: main.currentUser}, (res) => {\n      res.user_plans.forEach((plan) => {\n        if (plan.active) {\n          main.activePlan = plan.id;\n\n          UserPlan.get({id: plan.id}, (data) => {\n            data.user_days.forEach((day) => {\n              const date = moment(day.date).format('YYYY-MM-DD');\n              const today = moment().format('YYYY-MM-DD');\n              if (date === today) {\n                main.hasActivePlan = true;\n                main.dayId = day.id;\n              }\n            });\n          });\n        }\n      });\n    });\n  }\n\n\n  function logout() {\n    $auth.logout()\n      .then(() => {\n        $state.go('homepage');\n      });\n  }\n  main.logout = logout;\n}\n","angular.module('finalProject')\n  .controller('PlansIndexController', PlansIndexController)\n  .controller('PlansShowController', PlansShowController)\n  .controller('PlansEditController', PlansEditController)\n  .controller('PlansNewController', PlansNewController);\n\nPlansIndexController.$inject = ['User', '$auth'];\nfunction PlansIndexController(User, $auth) {\n  const plansIndex = this;\n\n  plansIndex.currentUser = $auth.getPayload().id;\n  plansIndex.all = User.get({id: plansIndex.currentUser}, () => {\n    plansIndex.all.user_plans.forEach((plan) => {\n      if (plan.active) {\n        plansIndex.hasActivePlan = true;\n      }\n    });\n\n  });\n}\n\nPlansShowController.$inject = ['UserPlan' ,'$state','$window'];\nfunction PlansShowController(UserPlan, $state, $window) {\n  const plansShow = this;\n  const moment = $window.moment;\n\n  plansShow.plan = UserPlan.get($state.params, () => {\n\n    plansShow.totalWorkouts = 0;\n    plansShow.totalMiles = 0;\n    plansShow.completedWorkouts = 0;\n    plansShow.completedMiles = 0;\n    plansShow.labels = [];\n    plansShow.series = ['Target', 'Actual'];\n    plansShow.targetData = [];\n    plansShow.actualData =[];\n    plansShow.colors = ['#45b7cd', '#ff6384'];\n\n    // Check if plan has started\n    if (plansShow.plan.active) {\n      const start = moment(plansShow.plan.start_date).format('YYYY-MM-DD');\n      const today =  moment().format('YYYY-MM-DD');\n\n      if (start > today) {\n        plansShow.plan.future = true;\n      }\n    }\n\n    // Set up chart\n    const numWeeks = plansShow.plan.user_days.length / 7;\n    for (var i = 0; i < numWeeks; i++) {\n      plansShow.labels.push(`Week ${i+1}`);\n      plansShow.targetMiles = 0;\n      plansShow.actualMiles = 0;\n\n      // Aggregate weekly mileage\n      plansShow.plan.user_days.forEach((day) => {\n        if (day.week === i + 1) {\n          if (day.exercise) {\n            plansShow.targetMiles += day.exercise.miles;\n          }\n          if (day.completed) {\n            plansShow.actualMiles += day.exercise.miles;\n          }\n        }\n      });\n\n      plansShow.targetData.push(plansShow.targetMiles);\n      plansShow.actualData.push(plansShow.actualMiles);\n    }\n    plansShow.data = [plansShow.targetData, plansShow.actualData];\n\n    plansShow.plan.user_days.forEach((day) => {\n      // Find current week\n      const date =  moment(day.date).format('YYYY-MM-DD');\n      const today = moment().format('YYYY-MM-DD');\n      if (date === today) {\n        plansShow.currentWeek = day.week;\n      }\n\n      if (day.exercise) {\n        // Calculate total number of workout days\n        plansShow.totalWorkouts += 1;\n        plansShow.totalMiles += day.exercise.miles;\n\n        // Calculate num completed workouts\n        if (day.completed) {\n          plansShow.completedWorkouts += 1;\n          plansShow.completedMiles += day.exercise.miles;\n        }\n      }\n    });\n\n    plansShow.totalMiles = Math.floor(plansShow.totalMiles);\n    plansShow.completedMiles = Math.floor(plansShow.completedMiles);\n\n  });\n}\n\nPlansEditController.$inject = ['$state', 'UserPlan'];\nfunction PlansEditController($state, UserPlan) {\n  const plansEdit = this;\n\n  plansEdit.plan = UserPlan.get($state.params);\n\n  function endPlan() {\n    plansEdit.plan.active = false;\n    UserPlan.update($state.params,plansEdit.plan, () => {\n      $state.go('plansIndex');\n    });\n  }\n\n  function deletePlan() {\n    UserPlan.remove($state.params, () => {\n      $state.go('plansIndex');\n    });\n  }\n\n  plansEdit.endPlan = endPlan;\n  plansEdit.deletePlan = deletePlan;\n}\n\n\nPlansNewController.$inject = ['User', 'UserPlan', '$state'];\nfunction PlansNewController(User, UserPlan, $state) {\n  const plansNew = this;\n\n  User.get($state.params, (user) => {\n    plansNew.userPlans = user.user_plans;\n    plansNew.hasActivePlan = false;\n\n    plansNew.userPlans.forEach((plan) => {\n      if (plan.active === true) {\n        plansNew.hasActivePlan = true;\n        plansNew.activePlan = plan;\n      }\n    });\n\n    if (!plansNew.hasActivePlan){\n      $state.go('setup');\n    }\n  });\n\n  function endPlan(id) {\n    plansNew.activePlan.active = false;\n    UserPlan.update(id, plansNew.activePlan, () => {\n      $state.go('setup');\n    });\n  }\n  plansNew.endPlan = endPlan;\n}\n","angular.module('finalProject')\n  .config(Router);\n\nRouter.$inject = ['$stateProvider', '$urlRouterProvider'];\nfunction Router($stateProvider, $urlRouterProvider) {\n  $stateProvider\n    .state('homepage', {\n      url: '/',\n      templateUrl: '/templates/homepage.html',\n      controller: 'MainController as main'\n    })\n    .state('setup', {\n      url: '/setup',\n      templateUrl: '/templates/setup.html',\n      controller: 'SetupController as setupPlan'\n    })\n    .state('plansIndex', {\n      url: '/plans',\n      templateUrl: '/templates/plansIndex.html',\n      controller: 'PlansIndexController as plansIndex'\n    })\n    .state('plansShow', {\n      url: '/plans/:id',\n      templateUrl: '/templates/plansShow.html',\n      controller: 'PlansShowController as plansShow'\n    })\n    .state('plansEdit', {\n      url: '/plans/:id/end',\n      templateUrl: '/templates/plansEdit.html',\n      controller: 'PlansEditController as plansEdit'\n    })\n    .state('plansNew', {\n      url: '/:id/new',\n      templateUrl: '/templates/plansNew.html',\n      controller: 'PlansNewController as plansNew'\n    })\n    .state('weeksShow', {\n      url: '/plans/:planId/weeks/:weekId',\n      templateUrl: '/templates/weeksShow.html',\n      controller: 'WeeksShowController as weeksShow'\n    })\n    .state('weeksEdit', {\n      url: '/plans/:planId/weeks/:weekId/edit',\n      templateUrl: '/templates/weeksEdit.html',\n      controller: 'WeeksEditController as weeksEdit'\n    })\n    .state('daysIndex', {\n      url: '/plans/:id/days',\n      templateUrl: '/templates/daysIndex.html',\n      controller: 'DaysIndexController as daysIndex'\n    })\n    .state('daysShow', {\n      url: '/plans/:planId/days/:dayId',\n      templateUrl: '/templates/daysShow.html',\n      controller: 'DaysShowController as daysShow'\n    })\n    .state('usersIndex', {\n      url: '/users',\n      templateUrl: '/templates/usersIndex.html',\n      controller: 'UsersIndexController as usersIndex'\n    })\n    .state('usersShow', {\n      url: '/users/:id',\n      templateUrl: '/templates/usersShow.html',\n      controller: 'UsersShowController as usersShow'\n    })\n    .state('usersEdit', {\n      url: '/users/:id/edit',\n      templateUrl: '/templates/usersEdit.html',\n      controller: 'UsersEditController as usersEdit'\n    })\n    .state('register', {\n      url: '/register',\n      templateUrl: '/templates/register.html',\n      controller: 'RegisterController as register'\n    })\n    .state('login', {\n      url: '/login',\n      templateUrl: '/templates/login.html',\n      controller: 'LoginController as login'\n    });\n\n  $urlRouterProvider.otherwise('/');\n}\n","angular.module('finalProject')\n  .controller('SetupController', SetupController);\n\nSetupController.$inject = ['UserPlan','$state','$scope'];\nfunction SetupController(UserPlan, $state, $scope) {\n  const setupPlan = this;\n\n  function create(){\n    UserPlan.save(setupPlan, () => {\n      $state.go('plansIndex');\n    });\n  }\n\n  // Date Picker\n  // $scope.myDate = new Date();\n  //\n  // $scope.minDate = new Date(\n  //   $scope.myDate.getFullYear(),\n  //   $scope.myDate.getMonth() - 2,\n  //   $scope.myDate.getDate());\n  //\n  // $scope.maxDate = new Date(\n  //   $scope.myDate.getFullYear(),\n  //   $scope.myDate.getMonth() + 2,\n  //   $scope.myDate.getDate());\n  //\n  // $scope.onlyWeekendsPredicate = function(date) {\n  //   var day = date.getDay();\n  //   return day === 0 || day === 6;\n  // };\n\n  setupPlan.create = create;\n}\n","angular.module('finalProject')\n  .factory('User', User);\n\nUser.$inject = ['$resource', 'API_URL'];\nfunction User($resource, API_URL) {\n  return new $resource(`${API_URL}/users/:id`, { id: '@id'}, {\n    update: { method: 'PUT'}\n  });\n}\n","angular.module('finalProject')\n  .factory('UserPlan', UserPlan);\n\nUserPlan.$inject = ['$resource', 'API_URL'];\nfunction UserPlan($resource, API_URL) {\n  return new $resource(`${API_URL}/user_plans/:id`, { id: '@id'}, {\n    update: { method: 'PUT'}\n  });\n}\n","angular.module('finalProject')\n  .controller('UsersIndexController', UsersIndexController)\n  .controller('UsersShowController', UsersShowController)\n  .controller('UsersEditController', UsersEditController);\n\nUsersIndexController.$inject = ['User'];\nfunction UsersIndexController(User) {\n  const usersIndex = this;\n\n  usersIndex.all = User.query();\n}\n\nUsersShowController.$inject = ['User', '$state','$auth'];\nfunction UsersShowController(User, $state, $auth) {\n  const usersShow = this;\n  usersShow.user = User.get($state.params);\n\n  function userDelete() {\n    usersShow.user.$remove(() => {\n      $state.go('usersIndex');\n    });\n  }\n\n  function logout() {\n    $auth.logout()\n      .then(() => {\n        $state.go('homepage');\n      });\n  }\n\n  usersShow.logout = logout;\n  usersShow.delete = userDelete;\n}\n\nUsersEditController.$inject = ['User', '$state'];\nfunction UsersEditController(User, $state) {\n  const usersEdit = this;\n\n  usersEdit.user = User.get($state.params);\n\n  function update() {\n    User.update(usersEdit.user.id, usersEdit.user, () => {\n      $state.go('usersShow', $state.params);\n    });\n  }\n\n  usersEdit.update = update;\n}\n","angular.module('finalProject')\n  .controller('WeeksShowController', WeeksShowController)\n  .controller('WeeksEditController', WeeksEditController);\n\nWeeksShowController.$inject = ['UserPlan', '$state'];\nfunction WeeksShowController(UserPlan, $state) {\n  const weeksShow = this;\n\n  weeksShow.planId = $state.params.planId;\n  weeksShow.weekId = $state.params.weekId;\n  weeksShow.totalWorkouts = 0;\n  weeksShow.completedWorkouts = 0;\n  weeksShow.totalMiles = 0;\n  weeksShow.completedMiles = 0;\n\n  UserPlan.get({ id: weeksShow.planId, week: weeksShow.weekId}, (week) => {\n    weeksShow.thisWeek = week.user_days;\n\n    weeksShow.thisWeek.forEach((day) => {\n      if (day.exercise) {\n        // Calculate total number of workout days\n        weeksShow.totalWorkouts += 1;\n        weeksShow.totalMiles += day.exercise.miles;\n\n        // Calculate num completed workouts\n        if (day.completed) {\n          weeksShow.completedWorkouts += 1;\n          weeksShow.completedMiles += day.exercise.miles;\n        }\n      }\n    });\n\n    weeksShow.totalMiles = Math.floor(weeksShow.totalMiles);\n    weeksShow.completedMiles = Math.floor(weeksShow.completedMiles);\n\n  });\n}\n\nWeeksEditController.$inject = ['UserPlan', '$state'];\nfunction WeeksEditController(UserPlan, $state) {\n  const weeksEdit = this;\n\n  weeksEdit.planId = $state.params.planId;\n  weeksEdit.weekId = $state.params.weekId;\n\n  UserPlan.get({ id: weeksEdit.planId, week: weeksEdit.weekId }, (plan) => {\n    weeksEdit.plan = plan;\n    weeksEdit.thisWeek = plan.user_days.sort(function(a,b) {\n      return a.position - b.position;\n    });\n    weeksEdit.startingDay = plan.user_days[0];\n  });\n\n  function updatePosition($index){\n    let index = weeksEdit.startingDay.position;\n    weeksEdit.thisWeek.splice($index, 1);\n    weeksEdit.thisWeek.forEach((day) => {\n      day.position = index;\n      index++;\n    });\n  }\n\n  function savePlan(){\n    UserPlan.update(weeksEdit.planId, weeksEdit.plan);\n  }\n\n  weeksEdit.updatePosition = updatePosition;\n  weeksEdit.savePlan = savePlan;\n}\n"]}