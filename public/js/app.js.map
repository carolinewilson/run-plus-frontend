{"version":3,"sources":["js/app.js","js/controllers/auth.js","js/controllers/day.js","js/models/day.js","js/directives/googleMap.js","js/controllers/main.js","js/controllers/plan.js","js/router.js","js/controllers/setup.js","js/controllers/strava.js","js/services/stravaService.js","js/models/user.js","js/models/userPlan.js","js/controllers/users.js","js/controllers/week.js"],"names":["Auth","$authProvider","API_URL","loginUrl","signupUrl","tokenPrefix","oauth2","name","url","clientId","redirectUri","window","location","origin","authorizationEndpoint","RegisterController","$auth","$state","$window","submit","signup","register","user","then","res","localStorage","setItem","data","token","go","this","LoginController","login","credentials","user_plans","forEach","plan","active","activePlans","DaysIndexController","UserPlan","daysIndex","get","params","DaysShowController","Day","StravaService","markDone","daysShow","day","completed","update","dayId","planId","id","stravaId","accessToken","getItem","stravaActivityId","getActivity","successResponse","stravaData","errorResponse","console","log","$resource","method","googleMap","restrict","replace","template","scope","link","$scope","element","$watch","map","google","maps","Map","center","lat","polyline","lng","zoom","run","Polyline","path","geodesic","strokeColor","strokeOpacity","strokeWeight","setMap","MainController","User","getUserId","userId","getPayload","logout","main","moment","isLoggedIn","isAuthenticated","hasActivePlan","uiRouterState","hasStrava","currentUser","all","activePlan","today","format","startDate","start_date","planStarted","user_days","date","PlansIndexController","plansIndex","PlansShowController","plansShow","totalWorkouts","totalMiles","completedWorkouts","completedMiles","labels","series","targetData","actualData","colors","start","future","numWeeks","length","i","push","targetMiles","actualMiles","week","exercise","miles","currentWeek","Math","floor","PlansEditController","endPlan","plansEdit","deletePlan","remove","PlansNewController","plansNew","userPlans","Router","$stateProvider","$urlRouterProvider","state","templateUrl","controller","otherwise","SetupController","create","save","setupPlan","end_date","Date","add","StravaIndexController","$http","markComplete","strava_id","stravaIndex","userPlanId","userDays","getActivities","response","activity","activityId","distance","toFixed","elapsed_minutes","elapsed_time","elapsed_seconds","UsersIndexController","usersIndex","query","UsersShowController","userDelete","usersShow","$remove","removeItem","authenticateStrava","authenticate","access_token","athlete","delete","UsersEditController","usersEdit","WeeksShowController","weeksShow","weekId","thisWeek","WeeksEditController","updatePosition","$index","index","weeksEdit","startingDay","position","splice","savePlan","sort","a","b","angular","module","constant","config","$inject","factory","directive","service"],"mappings":"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","file":"app.js","sourcesContent":["angular.module('finalProject', ['ngResource', 'ui.router', 'satellizer','chart.js','dndLists','ngMessages','ngMaterial'])\n  .constant('API_URL', 'http://localhost:3000/api')\n  .config(Auth);\n\nAuth.$inject = ['$authProvider', 'API_URL'];\nfunction Auth($authProvider, API_URL) {\n  $authProvider.loginUrl = `${API_URL}/login`;\n  $authProvider.signupUrl = `${API_URL}/register`;\n\n  $authProvider.tokenPrefix = '';\n\n  $authProvider.oauth2({\n    name: 'strava',\n    url: `${API_URL}/oauth/strava`,\n    clientId: '15120',\n    redirectUri: window.location.origin,\n    authorizationEndpoint: 'https://www.strava.com/oauth/authorize'\n  });\n}\n","angular.module('finalProject')\n  .controller('RegisterController', RegisterController)\n  .controller('LoginController', LoginController);\n\nRegisterController.$inject = ['$auth', '$state','$window'];\nfunction RegisterController($auth, $state, $window) {\n  const register = this;\n\n  register.user = {};\n\n  function submit() {\n    $auth.signup(register.user)\n      .then((res) => {\n        $window.localStorage.setItem('token', res.data.token);\n        $state.go('setup');\n      });\n  }\n\n  register.submit = submit;\n}\n\nLoginController.$inject = ['$auth', '$state'];\nfunction LoginController($auth, $state) {\n  const login = this;\n\n  login.credentials = {};\n  login.activePlans = false;\n\n  function submit() {\n    $auth.login(login.credentials)\n      .then((res) => {\n        res.data.user.user_plans.forEach((plan) => {\n          if (plan.active) {\n            login.activePlans = true;\n          }\n        });\n\n        if (login.activePlans) {\n          $state.go('plansIndex');\n        } else {\n          $state.go('setup');\n        }\n      });\n  }\n\n  login.submit = submit;\n}\n","angular.module('finalProject')\n  .controller('DaysIndexController', DaysIndexController)\n  .controller('DaysShowController', DaysShowController);\n\nDaysIndexController.$inject = ['UserPlan', '$state'];\nfunction DaysIndexController(UserPlan, $state) {\n  const daysIndex = this;\n\n  daysIndex.plan = UserPlan.get($state.params);\n}\n\nDaysShowController.$inject = ['Day', '$state', '$window', 'StravaService'];\nfunction DaysShowController(Day, $state, $window, StravaService) {\n  const daysShow = this;\n\n  daysShow.planId = $state.params.planId;\n  daysShow.dayId = $state.params.dayId;\n\n  daysShow.day = Day.get({ id: daysShow.dayId });\n\n  if ($state.params.stravaId) {\n    // Get activities from Strava\n    const accessToken = $window.localStorage.getItem('strava_token');\n    const stravaActivityId = $state.params.stravaId;\n\n\n    StravaService\n      .getActivity(accessToken, stravaActivityId)\n      .then(\n        successResponse => {\n          daysShow.stravaData = successResponse;\n        },\n        errorResponse => {\n          console.log(errorResponse);\n        }\n      );\n  }\n\n  function markDone(){\n    daysShow.day.completed = true;\n    Day.update(daysShow.dayId, daysShow.day);\n  }\n\n  daysShow.markDone = markDone;\n}\n","angular.module('finalProject')\n  .factory('Day', Day);\n\nDay.$inject = ['$resource', 'API_URL'];\nfunction Day($resource, API_URL) {\n  return new $resource(`${API_URL}/user_days/:id`, { id: '@id'}, {\n    update: { method: 'PUT'}\n  });\n}\n","angular.module('finalProject')\n  .directive('googleMap', googleMap);\n\ngoogleMap.$inject = ['$window'];\nfunction googleMap($window) {\n  return {\n    restrict: 'E',\n    replace: true,\n    template: '<div class=\"google-map\"></div>',\n    scope: {\n      data: '='\n    },\n    link: function($scope, element) {\n      $scope.$watch('data', () => {\n        const map = new   $window.google.maps.Map(element[0], {\n          center: {lat: $scope.data.map.polyline[0].lat, lng: $scope.data.map.polyline[0].lng},\n          zoom: 14\n        });\n        \n        const run = new $window.google.maps.Polyline({\n          path: $scope.data.map.polyline,\n          geodesic: true,\n          strokeColor: '#FF0000',\n          strokeOpacity: 1.0,\n          strokeWeight: 2\n        });\n\n        run.setMap(map);\n      });\n    }\n  };\n}\n","angular.module('finalProject')\n  .controller('MainController', MainController);\n\nMainController.$inject = ['$auth','$state','User','UserPlan', '$window', '$scope'];\nfunction MainController($auth, $state, User, UserPlan, $window, $scope){\n  const main = this;\n  const moment = $window.moment;\n\n  main.isLoggedIn = $auth.isAuthenticated;\n  main.hasActivePlan = false;\n  $scope.uiRouterState = $state;\n\n  function getUserId() {\n    const userId = $auth.getPayload().id;\n    $state.go('usersShow', {id: userId});\n  }\n\n  // Check if user has Strava account\n  main.hasStrava = $window.localStorage.getItem('strava_token');\n\n  if (main.isLoggedIn()) {\n    main.currentUser = $auth.getPayload().id;\n\n    // Get user data\n    main.all = User.get({id: main.currentUser}, (res) => {\n      res.user_plans.forEach((plan) => {\n        if (plan.active) {\n          main.activePlan = plan.id;\n\n          // Get active user plan\n          UserPlan.get({id: plan.id}, (data) => {\n\n            // Check if plan has started\n            const today = moment().format('YYYY-MM-DD');\n            const startDate = moment(plan.start_date).format('YYYY-MM-DD');\n            (startDate <= today) ?\n              main.planStarted = false: main.planStarted = true;\n\n            data.user_days.forEach((day) => {\n              const date = moment(day.date).format('YYYY-MM-DD');\n              if (date === today) {\n                main.hasActivePlan = true;\n                main.dayId = day.id;\n              }\n            });\n          });\n        }\n      });\n    });\n  }\n\n\n  function logout() {\n    $auth.logout()\n      .then(() => {\n        $state.go('homepage');\n      });\n  }\n\n  main.logout = logout;\n  main.getUserId = getUserId;\n}\n","angular.module('finalProject')\n  .controller('PlansIndexController', PlansIndexController)\n  .controller('PlansShowController', PlansShowController)\n  .controller('PlansEditController', PlansEditController)\n  .controller('PlansNewController', PlansNewController);\n\nPlansIndexController.$inject = ['User', '$auth'];\nfunction PlansIndexController(User, $auth) {\n  const plansIndex = this;\n\n  plansIndex.currentUser = $auth.getPayload().id;\n  plansIndex.all = User.get({id: plansIndex.currentUser}, () => {\n    plansIndex.all.user_plans.forEach((plan) => {\n      if (plan.active) {\n        plansIndex.hasActivePlan = true;\n      }\n    });\n\n  });\n}\n\nPlansShowController.$inject = ['UserPlan' ,'$state','$window'];\nfunction PlansShowController(UserPlan, $state, $window, $auth) {\n  const plansShow = this;\n  const moment = $window.moment;\n\n  plansShow.plan = UserPlan.get($state.params, () => {\n\n    plansShow.totalWorkouts = 0;\n    plansShow.totalMiles = 0;\n    plansShow.completedWorkouts = 0;\n    plansShow.completedMiles = 0;\n    plansShow.labels = [];\n    plansShow.series = ['Target', 'Actual'];\n    plansShow.targetData = [];\n    plansShow.actualData =[];\n    plansShow.colors = ['#45b7cd', '#ff6384'];\n\n    // Check if plan has started\n    if (plansShow.plan.active) {\n      const start = moment(plansShow.plan.start_date).format('YYYY-MM-DD');\n      const today =  moment().format('YYYY-MM-DD');\n\n      if (start > today) {\n        plansShow.plan.future = true;\n      }\n    }\n\n    // Check if user has Strava account\n    plansShow.hasStrava = $window.localStorage.getItem('strava_token');\n\n    // Set up chart\n    const numWeeks = plansShow.plan.user_days.length / 7;\n    for (var i = 0; i < numWeeks; i++) {\n      plansShow.labels.push(`Week ${i+1}`);\n      plansShow.targetMiles = 0;\n      plansShow.actualMiles = 0;\n\n      // Aggregate weekly mileage\n      plansShow.plan.user_days.forEach((day) => {\n        if (day.week === i + 1) {\n          if (day.exercise) {\n            plansShow.targetMiles += day.exercise.miles;\n          }\n          if (day.completed) {\n            plansShow.actualMiles += day.exercise.miles;\n          }\n        }\n      });\n\n      plansShow.targetData.push(plansShow.targetMiles);\n      plansShow.actualData.push(plansShow.actualMiles);\n    }\n    plansShow.data = [plansShow.targetData, plansShow.actualData];\n\n    plansShow.plan.user_days.forEach((day) => {\n      // Find current week \n      const date =  moment(day.date).format('YYYY-MM-DD');\n      const today = moment().format('YYYY-MM-DD');\n      if (date === today) {\n        plansShow.currentWeek = day.week;\n      }\n\n      if (day.exercise) {\n        // Calculate total number of workout days\n        plansShow.totalWorkouts += 1;\n        plansShow.totalMiles += day.exercise.miles;\n\n        // Calculate num completed workouts\n        if (day.completed) {\n          plansShow.completedWorkouts += 1;\n          plansShow.completedMiles += day.exercise.miles;\n        }\n      }\n    });\n\n    plansShow.totalMiles = Math.floor(plansShow.totalMiles);\n    plansShow.completedMiles = Math.floor(plansShow.completedMiles);\n\n  });\n}\n\nPlansEditController.$inject = ['$state', 'UserPlan'];\nfunction PlansEditController($state, UserPlan) {\n  const plansEdit = this;\n\n  plansEdit.plan = UserPlan.get($state.params);\n\n  function endPlan() {\n    plansEdit.plan.active = false;\n    UserPlan.update($state.params,plansEdit.plan, () => {\n      $state.go('plansIndex');\n    });\n  }\n\n  function deletePlan() {\n    UserPlan.remove($state.params, () => {\n      $state.go('plansIndex');\n    });\n  }\n\n  plansEdit.endPlan = endPlan;\n  plansEdit.deletePlan = deletePlan;\n}\n\n\nPlansNewController.$inject = ['User', 'UserPlan', '$state'];\nfunction PlansNewController(User, UserPlan, $state) {\n  const plansNew = this;\n\n  User.get($state.params, (user) => {\n    plansNew.userPlans = user.user_plans;\n    plansNew.hasActivePlan = false;\n\n    plansNew.userPlans.forEach((plan) => {\n      if (plan.active === true) {\n        plansNew.hasActivePlan = true;\n        plansNew.activePlan = plan;\n      }\n    });\n\n    if (!plansNew.hasActivePlan){\n      $state.go('setup');\n    }\n  });\n\n  function endPlan(id) {\n    plansNew.activePlan.active = false;\n    UserPlan.update(id, plansNew.activePlan, () => {\n      $state.go('setup');\n    });\n  }\n  plansNew.endPlan = endPlan;\n}\n","angular.module('finalProject')\n  .config(Router);\n\nRouter.$inject = ['$stateProvider', '$urlRouterProvider'];\nfunction Router($stateProvider, $urlRouterProvider) {\n  $stateProvider\n    .state('homepage', {\n      url: '/',\n      templateUrl: '/templates/homepage.html',\n      controller: 'MainController as main'\n    })\n    .state('setup', {\n      url: '/setup',\n      templateUrl: '/templates/setup.html',\n      controller: 'SetupController as setupPlan'\n    })\n    .state('plansIndex', {\n      url: '/plans',\n      templateUrl: '/templates/plansIndex.html',\n      controller: 'PlansIndexController as plansIndex'\n    })\n    .state('plansShow', {\n      url: '/plans/:id',\n      templateUrl: '/templates/plansShow.html',\n      controller: 'PlansShowController as plansShow'\n    })\n    .state('plansEdit', {\n      url: '/plans/:id/end',\n      templateUrl: '/templates/plansEdit.html',\n      controller: 'PlansEditController as plansEdit'\n    })\n    .state('plansNew', {\n      url: '/:id/new',\n      templateUrl: '/templates/plansNew.html',\n      controller: 'PlansNewController as plansNew'\n    })\n    .state('weeksShow', {\n      url: '/plans/:planId/weeks/:weekId',\n      templateUrl: '/templates/weeksShow.html',\n      controller: 'WeeksShowController as weeksShow'\n    })\n    .state('weeksEdit', {\n      url: '/plans/:planId/weeks/:weekId/edit',\n      templateUrl: '/templates/weeksEdit.html',\n      controller: 'WeeksEditController as weeksEdit'\n    })\n    .state('daysIndex', {\n      url: '/plans/:id/days',\n      templateUrl: '/templates/daysIndex.html',\n      controller: 'DaysIndexController as daysIndex'\n    })\n    .state('daysShow', {\n      url: '/plans/:planId/days/:dayId?stravaId',\n      templateUrl: '/templates/daysShow.html',\n      controller: 'DaysShowController as daysShow'\n    })\n    .state('stravaIndex', {\n      url: '/strava',\n      templateUrl: '/templates/stravaIndex.html',\n      controller: 'StravaIndexController as stravaIndex'\n    })\n    .state('usersIndex', {\n      url: '/users',\n      templateUrl: '/templates/usersIndex.html',\n      controller: 'UsersIndexController as usersIndex'\n    })\n    .state('usersShow', {\n      url: '/users/:id',\n      templateUrl: '/templates/usersShow.html',\n      controller: 'UsersShowController as usersShow'\n    })\n    .state('usersEdit', {\n      url: '/users/:id/edit',\n      templateUrl: '/templates/usersEdit.html',\n      controller: 'UsersEditController as usersEdit'\n    })\n    .state('register', {\n      url: '/register',\n      templateUrl: '/templates/register.html',\n      controller: 'RegisterController as register'\n    })\n    .state('login', {\n      url: '/login',\n      templateUrl: '/templates/login.html',\n      controller: 'LoginController as login'\n    });\n\n  $urlRouterProvider.otherwise('/');\n}\n","angular.module('finalProject')\n  .controller('SetupController', SetupController);\n\nSetupController.$inject = ['UserPlan','$state','$window'];\nfunction SetupController(UserPlan, $state, $window) {\n  const setupPlan = this;\n  const moment = $window.moment;\n\n  setupPlan.end_date = new Date(moment().add(6, 'weeks').format('YYYY-MM-DD'));\n\n  function create(){\n    UserPlan.save(setupPlan, () => {\n      $state.go('plansIndex');\n    });\n  }\n\n  setupPlan.create = create;\n}\n","angular.module('finalProject')\n  .controller('StravaIndexController', StravaIndexController);\n\nStravaIndexController.$inject = ['$http', 'StravaService','$auth', 'User','UserPlan','Day', '$window', '$state'];\nfunction StravaIndexController($http, StravaService, $auth, User, UserPlan, Day, $window, $state){\n  const stravaIndex = this;\n  const moment = $window.moment;\n  const userId = $auth.getPayload().id;\n\n  User.get({id: userId}, (res) => {\n    res.user_plans.forEach((plan) => {\n      if (plan.active) {\n        stravaIndex.userPlanId = plan.id;\n        UserPlan.get({id: plan.id }, (data) => {\n          stravaIndex.userDays = data.user_days;\n          data.user_days.forEach((day) => {\n            day.date = moment(day.date).format('YYYY-MM-DD');\n          });\n\n        });\n      }\n    });\n  });\n\n\n  // Get activities from Strava\n  const accessToken = $window.localStorage.getItem('strava_token');\n\n  StravaService\n    .getActivities(accessToken)\n    .then(\n      successResponse => {\n        stravaIndex.data = successResponse;\n      },\n      errorResponse => {\n        console.log(errorResponse);\n      }\n    );\n\n  function markComplete(planId, dayId, stravaId){\n\n    Day.get({id: dayId}, (res) => {\n      res.completed = true;\n      res.strava_id = stravaId;\n\n      Day.update(res, res, () => {\n        $state.go('daysShow', {planId: planId, dayId: dayId, stravaId: stravaId});\n      });\n    });\n  }\n\n  stravaIndex.markComplete = markComplete;\n}\n","angular.module('finalProject')\n  .service('StravaService', StravaService);\n\nStravaService.$inject = ['$http', '$window'];\nfunction StravaService($http, $window) {\n  const moment = $window.moment;\n\n  function getActivities(accessToken) {\n\n    return $http({\n      method: 'GET',\n      url: 'http://localhost:3000/api/strava',\n      params: {\n        accessToken\n      }\n    }).then(function successCallback(response) {\n      response.data.forEach((activity) => {\n        activity.start_date = moment(activity.start_date).format('YYYY-MM-DD');\n\n      });\n\n      return response.data;\n    }, function errorCallback(response) {\n      console.log(response);\n    });\n  }\n\n  function getActivity(accessToken, activityId) {\n\n    return $http({\n      method: 'GET',\n      url: 'http://localhost:3000/api/strava/activity',\n      params: {\n        activityId,\n        accessToken\n      }\n    }).then(function successCallback(response) {\n      response.data.distance = ((response.data.distance / 1000) * 0.621371).toFixed(1);\n\n      response.data.elapsed_minutes = Math.floor(response.data.elapsed_time / 60);\n      response.data.elapsed_seconds = ((response.data.elapsed_time % 60) * 60);\n\n\n      return response.data;\n    }, function errorCallback(response) {\n      console.log(response);\n    });\n  }\n\n  this.getActivities = getActivities;\n  this.getActivity = getActivity;\n}\n","angular.module('finalProject')\n  .factory('User', User);\n\nUser.$inject = ['$resource', 'API_URL'];\nfunction User($resource, API_URL) {\n  return new $resource(`${API_URL}/users/:id`, { id: '@id'}, {\n    update: { method: 'PUT'}\n  });\n}\n","angular.module('finalProject')\n  .factory('UserPlan', UserPlan);\n\nUserPlan.$inject = ['$resource', 'API_URL'];\nfunction UserPlan($resource, API_URL) {\n  return new $resource(`${API_URL}/user_plans/:id`, { id: '@id'}, {\n    update: { method: 'PUT'}\n  });\n}\n","angular.module('finalProject')\n  .controller('UsersIndexController', UsersIndexController)\n  .controller('UsersShowController', UsersShowController)\n  .controller('UsersEditController', UsersEditController);\n\nUsersIndexController.$inject = ['User'];\nfunction UsersIndexController(User) {\n  const usersIndex = this;\n\n  usersIndex.all = User.query();\n}\n\nUsersShowController.$inject = ['User', '$state','$auth', '$window'];\nfunction UsersShowController(User, $state, $auth, $window) {\n  const usersShow = this;\n  usersShow.user = User.get($state.params);\n\n  function userDelete() {\n    usersShow.user.$remove(() => {\n      $state.go('usersIndex');\n    });\n  }\n\n  function logout() {\n\n    $auth.logout()\n      .then(() => {\n        $window.localStorage.removeItem('strava_token');\n        $state.go('homepage');\n      });\n  }\n\n  function authenticateStrava() {\n    $auth.authenticate('strava')\n      .then((res) => {\n        $window.localStorage.setItem('strava_token', res.data.access_token);\n\n        usersShow.user.strava_id = res.data.athlete.id;\n\n        User.update(usersShow.user.id, usersShow.user, () => {\n          $state.go('stravaIndex');\n        });\n      });\n  }\n\n  usersShow.logout = logout;\n  usersShow.delete = userDelete;\n  usersShow.authenticateStrava = authenticateStrava;\n}\n\nUsersEditController.$inject = ['User', '$state'];\nfunction UsersEditController(User, $state) {\n  const usersEdit = this;\n\n  usersEdit.user = User.get($state.params);\n\n  function update() {\n    User.update(usersEdit.user.id, usersEdit.user, () => {\n      $state.go('usersShow', $state.params);\n    });\n  }\n\n  usersEdit.update = update;\n}\n","angular.module('finalProject')\n  .controller('WeeksShowController', WeeksShowController)\n  .controller('WeeksEditController', WeeksEditController);\n\nWeeksShowController.$inject = ['UserPlan', '$state'];\nfunction WeeksShowController(UserPlan, $state) {\n  const weeksShow = this;\n\n  weeksShow.planId = $state.params.planId;\n  weeksShow.weekId = $state.params.weekId;\n  weeksShow.totalWorkouts = 0;\n  weeksShow.completedWorkouts = 0;\n  weeksShow.totalMiles = 0;\n  weeksShow.completedMiles = 0;\n\n  UserPlan.get({ id: weeksShow.planId, week: weeksShow.weekId}, (week) => {\n    weeksShow.thisWeek = week.user_days;\n\n    weeksShow.thisWeek.forEach((day) => {\n      if (day.exercise) {\n        // Calculate total number of workout days\n        weeksShow.totalWorkouts += 1;\n        weeksShow.totalMiles += day.exercise.miles;\n\n        // Calculate num completed workouts\n        if (day.completed) {\n          weeksShow.completedWorkouts += 1;\n          weeksShow.completedMiles += day.exercise.miles;\n        }\n      }\n    });\n\n    weeksShow.totalMiles = Math.floor(weeksShow.totalMiles);\n    weeksShow.completedMiles = Math.floor(weeksShow.completedMiles);\n\n  });\n}\n\nWeeksEditController.$inject = ['UserPlan', '$state'];\nfunction WeeksEditController(UserPlan, $state) {\n  const weeksEdit = this;\n\n  weeksEdit.planId = $state.params.planId;\n  weeksEdit.weekId = $state.params.weekId;\n\n  UserPlan.get({ id: weeksEdit.planId, week: weeksEdit.weekId }, (plan) => {\n    weeksEdit.plan = plan;\n    weeksEdit.thisWeek = plan.user_days.sort(function(a,b) {\n      return a.position - b.position;\n    });\n    weeksEdit.startingDay = plan.user_days[0];\n  });\n\n  function updatePosition($index){\n    let index = weeksEdit.startingDay.position;\n    weeksEdit.thisWeek.splice($index, 1);\n    weeksEdit.thisWeek.forEach((day) => {\n      day.position = index;\n      index++;\n    });\n  }\n\n  function savePlan(){\n    UserPlan.update(weeksEdit.planId, weeksEdit.plan);\n  }\n\n  weeksEdit.updatePosition = updatePosition;\n  weeksEdit.savePlan = savePlan;\n}\n"]}