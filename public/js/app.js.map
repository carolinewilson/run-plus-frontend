{"version":3,"sources":["js/app.js","js/controllers/auth.js","js/controllers/main.js","js/controllers/plan.js","js/router.js","js/controllers/setup.js","js/models/user.js","js/models/userPlan.js","js/controllers/users.js"],"names":["Auth","$authProvider","API_URL","loginUrl","signupUrl","tokenPrefix","RegisterController","$auth","$state","submit","signup","register","user","then","go","this","LoginController","login","credentials","MainController","logout","main","isLoggedIn","isAuthenticated","PlansIndexController","User","plansIndex","currentUser","getPayload","id","all","query","PlansShowController","UserPlan","plansShow","plan","get","params","totalWorkouts","completedWorkouts","user_days","forEach","day","exercise","completed","totalMiles","completedMiles","miles","Math","floor","Router","$stateProvider","$urlRouterProvider","state","url","templateUrl","controller","otherwise","SetupController","create","save","setupPlan","$resource","update","method","UsersIndexController","usersIndex","UsersShowController","userDelete","usersShow","$remove","delete","UsersEditController","usersEdit","angular","module","constant","config","$inject","factory"],"mappings":"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","file":"app.js","sourcesContent":["angular.module('finalProject', ['ngResource', 'ui.router', 'satellizer'])\n  .constant('API_URL', 'http://localhost:3000/api')\n  .config(Auth);\n\nAuth.$inject = ['$authProvider', 'API_URL'];\nfunction Auth($authProvider, API_URL) {\n  $authProvider.loginUrl = `${API_URL}/login`;\n  $authProvider.signupUrl = `${API_URL}/register`;\n\n  $authProvider.tokenPrefix = '';\n}\n","angular.module('finalProject')\n  .controller('RegisterController', RegisterController)\n  .controller('LoginController', LoginController);\n\nRegisterController.$inject = ['$auth', '$state'];\nfunction RegisterController($auth, $state) {\n  const register = this;\n\n  register.user = {};\n\n  function submit() {\n    $auth.signup(register.user)\n      .then(() => {\n        $state.go('setup');\n      });\n  }\n\n  register.submit = submit;\n}\n\nLoginController.$inject = ['$auth', '$state'];\nfunction LoginController($auth, $state) {\n  const login = this;\n\n  login.credentials = {};\n\n  function submit() {\n    $auth.login(login.credentials)\n      .then(() => {\n        $state.go('setup');\n      });\n  }\n\n  login.submit = submit;\n}\n","angular.module('finalProject')\n  .controller('MainController', MainController);\n\nMainController.$inject = ['$auth','$state'];\nfunction MainController($auth, $state){\n  const main = this;\n\n  main.isLoggedIn = $auth.isAuthenticated;\n\n  function logout() {\n    $auth.logout()\n      .then(() => {\n        // $window.localStorage.removeItem('token');\n        $state.go('login');\n      });\n  }\n  main.logout = logout;\n}\n","angular.module('finalProject')\n  .controller('PlansIndexController', PlansIndexController)\n  .controller('PlansShowController', PlansShowController);\n\nPlansIndexController.$inject = ['User', '$auth'];\nfunction PlansIndexController(User, $auth) {\n  const plansIndex = this;\n\n  plansIndex.currentUser = $auth.getPayload().id;\n\n  plansIndex.all = User.query();\n}\n\nPlansShowController.$inject = ['UserPlan' ,'$state'];\nfunction PlansShowController(UserPlan, $state) {\n  const plansShow = this;\n\n  plansShow.plan = UserPlan.get($state.params, () => {\n\n    plansShow.totalWorkouts = 0;\n    plansShow.completedWorkouts = 0;\n\n    plansShow.plan.user_days.forEach((day) => {\n      // Calculate total number of workout days\n      if (day.exercise) {\n        plansShow.totalWorkouts += 1;\n\n        // Calculate num completed workouts\n        if (day.completed) {\n          plansShow.completedWorkouts += 1;\n        }\n      }\n    });\n\n    // Calculate total milage of plan\n    plansShow.totalMiles = 0;\n    plansShow.completedMiles = 0;\n\n    plansShow.plan.user_days.forEach((day) => {\n      if (day.exercise) {\n        plansShow.totalMiles += day.exercise.miles;\n\n        // Calculate num completed miles\n        if (day.completed) {\n          plansShow.completedMiles += day.exercise.miles;\n        }\n      }\n    });\n\n    plansShow.totalMiles = Math.floor(plansShow.totalMiles);\n    plansShow.completedMiles = Math.floor(plansShow.completedMiles);\n\n  });\n\n\n}\n","angular.module('finalProject')\n  .config(Router);\n\nRouter.$inject = ['$stateProvider', '$urlRouterProvider'];\nfunction Router($stateProvider, $urlRouterProvider) {\n  $stateProvider\n    .state('homepage', {\n      url: '/',\n      templateUrl: '/templates/homepage.html',\n      controller: 'MainController as main'\n    })\n    .state('setup', {\n      url: '/setup',\n      templateUrl: '/templates/setup.html',\n      controller: 'SetupController as setupPlan'\n    })\n    .state('plansIndex', {\n      url: '/plans',\n      templateUrl: '/templates/plansIndex.html',\n      controller: 'PlansIndexController as plansIndex'\n    })\n    .state('plansShow', {\n      url: '/plans/:id',\n      templateUrl: '/templates/plansShow.html',\n      controller: 'PlansShowController as plansShow'\n    })\n    .state('usersIndex', {\n      url: '/users',\n      templateUrl: '/templates/usersIndex.html',\n      controller: 'UsersIndexController as usersIndex'\n    })\n    .state('usersShow', {\n      url: '/users/:id',\n      templateUrl: '/templates/usersShow.html',\n      controller: 'UsersShowController as usersShow'\n    })\n    .state('usersEdit', {\n      url: '/users/:id/edit',\n      templateUrl: '/templates/usersEdit.html',\n      controller: 'UsersEditController as usersEdit'\n    })\n    .state('register', {\n      url: '/register',\n      templateUrl: '/templates/register.html',\n      controller: 'RegisterController as register'\n    })\n    .state('login', {\n      url: '/login',\n      templateUrl: '/templates/login.html',\n      controller: 'LoginController as login'\n    });\n\n  $urlRouterProvider.otherwise('/users');\n}\n","angular.module('finalProject')\n  .controller('SetupController', SetupController);\n\nSetupController.$inject = ['UserPlan','$state'];\nfunction SetupController(UserPlan, $state) {\n  const setupPlan = this;\n\n  function create(){\n    UserPlan.save(setupPlan, () => {\n      $state.go('plan');\n    });\n  }\n\n  setupPlan.create = create;\n}\n","angular.module('finalProject')\n  .factory('User', User);\n\nUser.$inject = ['$resource', 'API_URL'];\nfunction User($resource, API_URL) {\n  return new $resource(`${API_URL}/users/:id`, { id: '@id'}, {\n    update: { method: 'PUT'}\n  });\n}\n","angular.module('finalProject')\n  .factory('UserPlan', UserPlan);\n\nUserPlan.$inject = ['$resource', 'API_URL'];\nfunction UserPlan($resource, API_URL) {\n  return new $resource(`${API_URL}/user_plans/:id`, { id: '@id'}, {\n    update: { method: 'PUT'}\n  });\n}\n","angular.module('finalProject')\n  .controller('UsersIndexController', UsersIndexController)\n  .controller('UsersShowController', UsersShowController)\n  .controller('UsersEditController', UsersEditController);\n\nUsersIndexController.$inject = ['User'];\nfunction UsersIndexController(User) {\n  const usersIndex = this;\n\n  usersIndex.all = User.query();\n}\n\nUsersShowController.$inject = ['User', '$state'];\nfunction UsersShowController(User, $state) {\n  const usersShow = this;\n  usersShow.user = User.get($state.params);\n\n  function userDelete() {\n    usersShow.user.$remove(() => {\n      $state.go('usersIndex');\n    });\n  }\n  usersShow.delete = userDelete;\n}\n\nUsersEditController.$inject = ['User', '$state'];\nfunction UsersEditController(User, $state) {\n  const usersEdit = this;\n\n  usersEdit.user = User.get($state.params);\n\n  function update() {\n    User.update(usersEdit.user.id, usersEdit.user, () => {\n      $state.go('usersShow', $state.params);\n    });\n  }\n\n  usersEdit.update = update;\n}\n"]}