{"version":3,"sources":["js/app.js","js/controllers/auth.js","js/controllers/day.js","js/models/day.js","js/controllers/main.js","js/controllers/plan.js","js/router.js","js/controllers/setup.js","js/models/user.js","js/models/userPlan.js","js/controllers/users.js","js/controllers/week.js"],"names":["Auth","$authProvider","API_URL","loginUrl","signupUrl","tokenPrefix","RegisterController","$auth","$state","submit","signup","register","user","then","go","this","LoginController","login","credentials","DaysIndexController","UserPlan","daysIndex","plan","get","params","DaysShowController","Day","markDone","daysShow","day","completed","update","dayId","planId","id","$resource","method","MainController","logout","main","isLoggedIn","isAuthenticated","PlansIndexController","User","plansIndex","currentUser","getPayload","all","PlansShowController","$window","plansShow","moment","totalWorkouts","totalMiles","completedWorkouts","completedMiles","user_days","forEach","date","format","today","currentWeek","week","exercise","miles","Math","floor","labels","series","data","Router","$stateProvider","$urlRouterProvider","state","url","templateUrl","controller","otherwise","SetupController","create","save","setupPlan","UsersIndexController","usersIndex","query","UsersShowController","userDelete","usersShow","$remove","delete","UsersEditController","usersEdit","WeeksShowController","weeksShow","weekId","thisWeek","push","WeeksEditController","updatePosition","$index","index","weeksEdit","startingDay","position","splice","savePlan","sort","a","b","angular","module","constant","config","$inject","factory"],"mappings":"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","file":"app.js","sourcesContent":["angular.module('finalProject', ['ngResource', 'ui.router', 'satellizer','chart.js','dndLists'])\n  .constant('API_URL', 'http://localhost:3000/api')\n  .config(Auth);\n\nAuth.$inject = ['$authProvider', 'API_URL'];\nfunction Auth($authProvider, API_URL) {\n  $authProvider.loginUrl = `${API_URL}/login`;\n  $authProvider.signupUrl = `${API_URL}/register`;\n\n  $authProvider.tokenPrefix = '';\n}\n","angular.module('finalProject')\n  .controller('RegisterController', RegisterController)\n  .controller('LoginController', LoginController);\n\nRegisterController.$inject = ['$auth', '$state'];\nfunction RegisterController($auth, $state) {\n  const register = this;\n\n  register.user = {};\n\n  function submit() {\n    $auth.signup(register.user)\n      .then(() => {\n        $state.go('login');\n      });\n  }\n\n  register.submit = submit;\n}\n\nLoginController.$inject = ['$auth', '$state'];\nfunction LoginController($auth, $state) {\n  const login = this;\n\n  login.credentials = {};\n\n  function submit() {\n    $auth.login(login.credentials)\n      .then(() => {\n        $state.go('setup');\n      });\n  }\n\n  login.submit = submit;\n}\n","angular.module('finalProject')\n  .controller('DaysIndexController', DaysIndexController)\n  .controller('DaysShowController', DaysShowController);\n\nDaysIndexController.$inject = ['UserPlan', '$state'];\nfunction DaysIndexController(UserPlan, $state) {\n  const daysIndex = this;\n\n  daysIndex.plan = UserPlan.get($state.params);\n}\n\nDaysShowController.$inject = ['Day', '$state'];\nfunction DaysShowController(Day, $state) {\n  const daysShow = this;\n\n  daysShow.planId = $state.params.planId;\n  daysShow.dayId = $state.params.dayId;\n\n  daysShow.day = Day.get({ id: daysShow.dayId });\n\n  function markDone(){\n    daysShow.day.completed = true;\n    Day.update(daysShow.dayId, daysShow.day);\n  }\n\n  daysShow.markDone = markDone;\n}\n","angular.module('finalProject')\n  .factory('Day', Day);\n\nDay.$inject = ['$resource', 'API_URL'];\nfunction Day($resource, API_URL) {\n  return new $resource(`${API_URL}/user_days/:id`, { id: '@id'}, {\n    update: { method: 'PUT'}\n  });\n}\n","angular.module('finalProject')\n  .controller('MainController', MainController);\n\nMainController.$inject = ['$auth','$state'];\nfunction MainController($auth, $state){\n  const main = this;\n\n  main.isLoggedIn = $auth.isAuthenticated;\n\n  function logout() {\n    $auth.logout()\n      .then(() => {\n        // $window.localStorage.removeItem('token');\n        $state.go('login');\n      });\n  }\n  main.logout = logout;\n}\n","angular.module('finalProject')\n  .controller('PlansIndexController', PlansIndexController)\n  .controller('PlansShowController', PlansShowController);\n\nPlansIndexController.$inject = ['User', '$auth'];\nfunction PlansIndexController(User, $auth) {\n  const plansIndex = this;\n\n  plansIndex.currentUser = $auth.getPayload().id;\n  plansIndex.all = User.get({id: plansIndex.currentUser});\n}\n\nPlansShowController.$inject = ['UserPlan' ,'$state','$window'];\nfunction PlansShowController(UserPlan, $state, $window) {\n  const plansShow = this;\n  const moment = $window.moment;\n\n  plansShow.plan = UserPlan.get($state.params, () => {\n\n    plansShow.totalWorkouts = 0;\n    plansShow.totalMiles = 0;\n    plansShow.completedWorkouts = 0;\n    plansShow.completedMiles = 0;\n\n    plansShow.plan.user_days.forEach((day) => {\n      // Find current week\n      const date =  moment(day.date).format('YYYY-MM-DD');\n      const today = moment().format('YYYY-MM-DD');\n      if (date === today) {\n        plansShow.currentWeek = day.week;\n      }\n\n      // Calculate total number of workout days\n      if (day.exercise) {\n        plansShow.totalWorkouts += 1;\n        plansShow.totalMiles += day.exercise.miles;\n\n        // Calculate num completed workouts\n        if (day.completed) {\n          plansShow.completedWorkouts += 1;\n          plansShow.completedMiles += day.exercise.miles;\n        }\n      }\n    });\n\n    plansShow.totalMiles = Math.floor(plansShow.totalMiles);\n    plansShow.completedMiles = Math.floor(plansShow.completedMiles);\n\n    plansShow.labels = ['2006', '2007', '2008', '2009', '2010', '2011', '2012'];\n    plansShow.series = ['Plan', 'Actual'];\n\n    plansShow.data = [\n      [65, 59, 80, 81, 56, 55, 40],\n      [28, 48, 40, 19, 86, 27, 90]\n    ];\n\n  });\n}\n","angular.module('finalProject')\n  .config(Router);\n\nRouter.$inject = ['$stateProvider', '$urlRouterProvider'];\nfunction Router($stateProvider, $urlRouterProvider) {\n  $stateProvider\n    .state('homepage', {\n      url: '/',\n      templateUrl: '/templates/homepage.html',\n      controller: 'MainController as main'\n    })\n    .state('setup', {\n      url: '/setup',\n      templateUrl: '/templates/setup.html',\n      controller: 'SetupController as setupPlan'\n    })\n    .state('plansIndex', {\n      url: '/plans',\n      templateUrl: '/templates/plansIndex.html',\n      controller: 'PlansIndexController as plansIndex'\n    })\n    .state('plansShow', {\n      url: '/plans/:id',\n      templateUrl: '/templates/plansShow.html',\n      controller: 'PlansShowController as plansShow'\n    })\n    .state('weeksShow', {\n      url: '/plans/:planId/weeks/:weekId',\n      templateUrl: '/templates/weeksShow.html',\n      controller: 'WeeksShowController as weeksShow'\n    })\n    .state('weeksEdit', {\n      url: '/plans/:planId/weeks/:weekId/edit',\n      templateUrl: '/templates/weeksEdit.html',\n      controller: 'WeeksEditController as weeksEdit'\n    })\n    .state('daysIndex', {\n      url: '/plans/:id/days',\n      templateUrl: '/templates/daysIndex.html',\n      controller: 'DaysIndexController as daysIndex'\n    })\n    .state('daysShow', {\n      url: '/plans/:planId/days/:dayId',\n      templateUrl: '/templates/daysShow.html',\n      controller: 'DaysShowController as daysShow'\n    })\n    .state('usersIndex', {\n      url: '/users',\n      templateUrl: '/templates/usersIndex.html',\n      controller: 'UsersIndexController as usersIndex'\n    })\n    .state('usersShow', {\n      url: '/users/:id',\n      templateUrl: '/templates/usersShow.html',\n      controller: 'UsersShowController as usersShow'\n    })\n    .state('usersEdit', {\n      url: '/users/:id/edit',\n      templateUrl: '/templates/usersEdit.html',\n      controller: 'UsersEditController as usersEdit'\n    })\n    .state('register', {\n      url: '/register',\n      templateUrl: '/templates/register.html',\n      controller: 'RegisterController as register'\n    })\n    .state('login', {\n      url: '/login',\n      templateUrl: '/templates/login.html',\n      controller: 'LoginController as login'\n    });\n\n  $urlRouterProvider.otherwise('/');\n}\n","angular.module('finalProject')\n  .controller('SetupController', SetupController);\n\nSetupController.$inject = ['UserPlan','$state'];\nfunction SetupController(UserPlan, $state) {\n  const setupPlan = this;\n\n  function create(){\n    UserPlan.save(setupPlan, () => {\n      $state.go('plansIndex');\n    });\n  }\n\n  setupPlan.create = create;\n}\n","angular.module('finalProject')\n  .factory('User', User);\n\nUser.$inject = ['$resource', 'API_URL'];\nfunction User($resource, API_URL) {\n  return new $resource(`${API_URL}/users/:id`, { id: '@id'}, {\n    update: { method: 'PUT'}\n  });\n}\n","angular.module('finalProject')\n  .factory('UserPlan', UserPlan);\n\nUserPlan.$inject = ['$resource', 'API_URL'];\nfunction UserPlan($resource, API_URL) {\n  return new $resource(`${API_URL}/user_plans/:id`, { id: '@id'}, {\n    update: { method: 'PUT'}\n  });\n}\n","angular.module('finalProject')\n  .controller('UsersIndexController', UsersIndexController)\n  .controller('UsersShowController', UsersShowController)\n  .controller('UsersEditController', UsersEditController);\n\nUsersIndexController.$inject = ['User'];\nfunction UsersIndexController(User) {\n  const usersIndex = this;\n\n  usersIndex.all = User.query();\n}\n\nUsersShowController.$inject = ['User', '$state'];\nfunction UsersShowController(User, $state) {\n  const usersShow = this;\n  usersShow.user = User.get($state.params);\n\n  function userDelete() {\n    usersShow.user.$remove(() => {\n      $state.go('usersIndex');\n    });\n  }\n  usersShow.delete = userDelete;\n}\n\nUsersEditController.$inject = ['User', '$state'];\nfunction UsersEditController(User, $state) {\n  const usersEdit = this;\n\n  usersEdit.user = User.get($state.params);\n\n  function update() {\n    User.update(usersEdit.user.id, usersEdit.user, () => {\n      $state.go('usersShow', $state.params);\n    });\n  }\n\n  usersEdit.update = update;\n}\n","angular.module('finalProject')\n  .controller('WeeksShowController', WeeksShowController)\n  .controller('WeeksEditController', WeeksEditController);\n\nWeeksShowController.$inject = ['UserPlan', '$state'];\nfunction WeeksShowController(UserPlan, $state) {\n  const weeksShow = this;\n\n  weeksShow.planId = $state.params.planId;\n  weeksShow.weekId = $state.params.weekId;\n\n  weeksShow.plan = UserPlan.get({ id: weeksShow.planId }, () => {\n    weeksShow.thisWeek = [];\n\n    weeksShow.plan.user_days.forEach((day) => {\n      if (day.week == weeksShow.weekId) {\n        weeksShow.thisWeek.push(day);\n      }\n    });\n  });\n}\n\nWeeksEditController.$inject = ['UserPlan', '$state'];\nfunction WeeksEditController(UserPlan, $state) {\n  const weeksEdit = this;\n\n  weeksEdit.planId = $state.params.planId;\n  weeksEdit.weekId = $state.params.weekId;\n\n  UserPlan.get({ id: weeksEdit.planId, week: weeksEdit.weekId }, (plan) => {\n    weeksEdit.plan = plan;\n    weeksEdit.thisWeek = plan.user_days.sort(function(a,b) {\n      return a.position - b.position;\n    });\n    weeksEdit.startingDay = plan.user_days[0];\n  });\n\n  function updatePosition($index){\n    let index = weeksEdit.startingDay.position;\n    weeksEdit.thisWeek.splice($index, 1);\n    weeksEdit.thisWeek.forEach((day) => {\n      day.position = index;\n      index++;\n    });\n  }\n\n  function savePlan(){\n    UserPlan.update(weeksEdit.planId, weeksEdit.plan);\n  }\n  \n  weeksEdit.updatePosition = updatePosition;\n  weeksEdit.savePlan = savePlan;\n}\n"]}