{"version":3,"sources":["js/app.js","js/controllers/auth.js","js/controllers/day.js","js/models/day.js","js/directives/googleMap.js","js/controllers/main.js","js/controllers/plan.js","js/router.js","js/controllers/setup.js","js/controllers/strava.js","js/services/stravaService.js","js/models/user.js","js/models/userPlan.js","js/controllers/users.js","js/controllers/week.js"],"names":["Auth","$authProvider","API_URL","loginUrl","signupUrl","tokenPrefix","oauth2","name","url","clientId","redirectUri","window","location","origin","authorizationEndpoint","RegisterController","$auth","$state","submit","signup","register","user","then","go","this","LoginController","login","credentials","res","data","user_plans","forEach","plan","active","activePlans","DaysIndexController","UserPlan","daysIndex","get","params","DaysShowController","Day","$window","StravaService","markDone","daysShow","day","completed","update","dayId","planId","id","stravaId","accessToken","localStorage","getItem","stravaActivityId","getActivity","successResponse","stravaData","errorResponse","console","log","$resource","method","googleMap","restrict","replace","template","scope","link","$scope","element","$watch","map","google","maps","Map","center","lat","polyline","lng","zoom","run","Polyline","path","geodesic","strokeColor","strokeOpacity","strokeWeight","setMap","MainController","User","getUserId","userId","getPayload","logout","main","moment","isLoggedIn","isAuthenticated","hasActivePlan","hasStrava","currentUser","all","activePlan","user_days","date","format","today","PlansIndexController","plansIndex","PlansShowController","plansShow","totalWorkouts","totalMiles","completedWorkouts","completedMiles","labels","series","targetData","actualData","colors","start","start_date","future","numWeeks","length","i","push","targetMiles","actualMiles","week","exercise","miles","currentWeek","Math","floor","PlansEditController","endPlan","plansEdit","deletePlan","remove","PlansNewController","plansNew","userPlans","Router","$stateProvider","$urlRouterProvider","state","templateUrl","controller","otherwise","SetupController","create","save","setupPlan","StravaIndexController","$http","markComplete","strava_id","stravaIndex","userPlanId","userDays","getActivities","response","activity","activityId","distance","toFixed","elapsed_minutes","elapsed_time","elapsed_seconds","UsersIndexController","usersIndex","query","UsersShowController","userDelete","usersShow","$remove","removeItem","authenticateStrava","authenticate","setItem","access_token","athlete","delete","UsersEditController","usersEdit","WeeksShowController","weeksShow","weekId","thisWeek","WeeksEditController","updatePosition","$index","index","weeksEdit","startingDay","position","splice","savePlan","sort","a","b","angular","module","constant","config","$inject","factory","directive","service"],"mappings":"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","file":"app.js","sourcesContent":["angular.module('finalProject', ['ngResource', 'ui.router', 'satellizer','chart.js','dndLists','ngMessages','ngMaterial'])\n  .constant('API_URL', 'http://localhost:3000/api')\n  .config(Auth);\n\nAuth.$inject = ['$authProvider', 'API_URL'];\nfunction Auth($authProvider, API_URL) {\n  $authProvider.loginUrl = `${API_URL}/login`;\n  $authProvider.signupUrl = `${API_URL}/register`;\n\n  $authProvider.tokenPrefix = '';\n\n  $authProvider.oauth2({\n    name: 'strava',\n    url: `${API_URL}/oauth/strava`,\n    clientId: '15120',\n    redirectUri: window.location.origin,\n    authorizationEndpoint: 'https://www.strava.com/oauth/authorize'\n  });\n}\n","angular.module('finalProject')\n  .controller('RegisterController', RegisterController)\n  .controller('LoginController', LoginController);\n\nRegisterController.$inject = ['$auth', '$state'];\nfunction RegisterController($auth, $state) {\n  const register = this;\n\n  register.user = {};\n\n  function submit() {\n    $auth.signup(register.user)\n      .then(() => {\n        $state.go('login');\n      });\n  }\n\n  register.submit = submit;\n}\n\nLoginController.$inject = ['$auth', '$state'];\nfunction LoginController($auth, $state) {\n  const login = this;\n\n  login.credentials = {};\n  login.activePlans = false;\n\n  function submit() {\n    $auth.login(login.credentials)\n      .then((res) => {\n        res.data.user.user_plans.forEach((plan) => {\n          if (plan.active) {\n            login.activePlans = true;\n          }\n        });\n\n        if (login.activePlans) {\n          $state.go('plansIndex');\n        } else {\n          $state.go('setup');\n        }\n      });\n  }\n\n  login.submit = submit;\n}\n","angular.module('finalProject')\n  .controller('DaysIndexController', DaysIndexController)\n  .controller('DaysShowController', DaysShowController);\n\nDaysIndexController.$inject = ['UserPlan', '$state'];\nfunction DaysIndexController(UserPlan, $state) {\n  const daysIndex = this;\n\n  daysIndex.plan = UserPlan.get($state.params);\n}\n\nDaysShowController.$inject = ['Day', '$state', '$window', 'StravaService'];\nfunction DaysShowController(Day, $state, $window, StravaService) {\n  const daysShow = this;\n\n  daysShow.planId = $state.params.planId;\n  daysShow.dayId = $state.params.dayId;\n\n  daysShow.day = Day.get({ id: daysShow.dayId });\n\n  if ($state.params.stravaId) {\n    // Get activities from Strava\n    const accessToken = $window.localStorage.getItem('strava_token');\n    const stravaActivityId = $state.params.stravaId;\n\n\n    StravaService\n      .getActivity(accessToken, stravaActivityId)\n      .then(\n        successResponse => {\n          daysShow.stravaData = successResponse;\n        },\n        errorResponse => {\n          console.log(errorResponse);\n        }\n      );\n  }\n\n  function markDone(){\n    daysShow.day.completed = true;\n    Day.update(daysShow.dayId, daysShow.day);\n  }\n\n  daysShow.markDone = markDone;\n}\n","angular.module('finalProject')\n  .factory('Day', Day);\n\nDay.$inject = ['$resource', 'API_URL'];\nfunction Day($resource, API_URL) {\n  return new $resource(`${API_URL}/user_days/:id`, { id: '@id'}, {\n    update: { method: 'PUT'}\n  });\n}\n","angular.module('finalProject')\n  .directive('googleMap', googleMap);\n\ngoogleMap.$inject = ['$window'];\nfunction googleMap($window) {\n  return {\n    restrict: 'E',\n    replace: true,\n    template: '<div class=\"google-map\"></div>',\n    scope: {\n      data: '='\n    },\n    link: function($scope, element) {\n      $scope.$watch('data', () => {\n        const map = new   $window.google.maps.Map(element[0], {\n          center: {lat: $scope.data.map.polyline[0].lat, lng: $scope.data.map.polyline[0].lng},\n          zoom: 14\n        });\n        \n        const run = new $window.google.maps.Polyline({\n          path: $scope.data.map.polyline,\n          geodesic: true,\n          strokeColor: '#FF0000',\n          strokeOpacity: 1.0,\n          strokeWeight: 2\n        });\n\n        run.setMap(map);\n      });\n    }\n  };\n}\n","angular.module('finalProject')\n  .controller('MainController', MainController);\n\nMainController.$inject = ['$auth','$state','User','UserPlan', '$window'];\nfunction MainController($auth, $state, User, UserPlan, $window){\n  const main = this;\n  const moment = $window.moment;\n\n  main.isLoggedIn = $auth.isAuthenticated;\n  main.hasActivePlan = false;\n\n  function getUserId() {\n    const userId = $auth.getPayload().id;\n    $state.go('usersShow', {id: userId});\n  }\n\n  // Check if user has Strava account\n  main.hasStrava = $window.localStorage.getItem('strava_token');\n\n  if (main.isLoggedIn()) {\n    main.currentUser = $auth.getPayload().id;\n\n    main.all = User.get({id: main.currentUser}, (res) => {\n      res.user_plans.forEach((plan) => {\n        if (plan.active) {\n          main.activePlan = plan.id;\n\n          UserPlan.get({id: plan.id}, (data) => {\n            data.user_days.forEach((day) => {\n              const date = moment(day.date).format('YYYY-MM-DD');\n              const today = moment().format('YYYY-MM-DD');\n              if (date === today) {\n                main.hasActivePlan = true;\n                main.dayId = day.id;\n              }\n            });\n          });\n        }\n      });\n    });\n  }\n\n\n  function logout() {\n    $auth.logout()\n      .then(() => {\n        $state.go('homepage');\n      });\n  }\n\n  main.logout = logout;\n  main.getUserId = getUserId;\n}\n","angular.module('finalProject')\n  .controller('PlansIndexController', PlansIndexController)\n  .controller('PlansShowController', PlansShowController)\n  .controller('PlansEditController', PlansEditController)\n  .controller('PlansNewController', PlansNewController);\n\nPlansIndexController.$inject = ['User', '$auth'];\nfunction PlansIndexController(User, $auth) {\n  const plansIndex = this;\n\n  plansIndex.currentUser = $auth.getPayload().id;\n  plansIndex.all = User.get({id: plansIndex.currentUser}, () => {\n    plansIndex.all.user_plans.forEach((plan) => {\n      if (plan.active) {\n        plansIndex.hasActivePlan = true;\n      }\n    });\n\n  });\n}\n\nPlansShowController.$inject = ['UserPlan' ,'$state','$window'];\nfunction PlansShowController(UserPlan, $state, $window, $auth) {\n  const plansShow = this;\n  const moment = $window.moment;\n\n  plansShow.plan = UserPlan.get($state.params, () => {\n\n    plansShow.totalWorkouts = 0;\n    plansShow.totalMiles = 0;\n    plansShow.completedWorkouts = 0;\n    plansShow.completedMiles = 0;\n    plansShow.labels = [];\n    plansShow.series = ['Target', 'Actual'];\n    plansShow.targetData = [];\n    plansShow.actualData =[];\n    plansShow.colors = ['#45b7cd', '#ff6384'];\n\n    // Check if plan has started\n    if (plansShow.plan.active) {\n      const start = moment(plansShow.plan.start_date).format('YYYY-MM-DD');\n      const today =  moment().format('YYYY-MM-DD');\n\n      if (start > today) {\n        plansShow.plan.future = true;\n      }\n    }\n\n    // Check if user has Strava account\n    plansShow.hasStrava = $window.localStorage.getItem('strava_token');\n\n    // Set up chart\n    const numWeeks = plansShow.plan.user_days.length / 7;\n    for (var i = 0; i < numWeeks; i++) {\n      plansShow.labels.push(`Week ${i+1}`);\n      plansShow.targetMiles = 0;\n      plansShow.actualMiles = 0;\n\n      // Aggregate weekly mileage\n      plansShow.plan.user_days.forEach((day) => {\n        if (day.week === i + 1) {\n          if (day.exercise) {\n            plansShow.targetMiles += day.exercise.miles;\n          }\n          if (day.completed) {\n            plansShow.actualMiles += day.exercise.miles;\n          }\n        }\n      });\n\n      plansShow.targetData.push(plansShow.targetMiles);\n      plansShow.actualData.push(plansShow.actualMiles);\n    }\n    plansShow.data = [plansShow.targetData, plansShow.actualData];\n\n    plansShow.plan.user_days.forEach((day) => {\n      // Find current week\n      const date =  moment(day.date).format('YYYY-MM-DD');\n      const today = moment().format('YYYY-MM-DD');\n      if (date === today) {\n        plansShow.currentWeek = day.week;\n      }\n\n      if (day.exercise) {\n        // Calculate total number of workout days\n        plansShow.totalWorkouts += 1;\n        plansShow.totalMiles += day.exercise.miles;\n\n        // Calculate num completed workouts\n        if (day.completed) {\n          plansShow.completedWorkouts += 1;\n          plansShow.completedMiles += day.exercise.miles;\n        }\n      }\n    });\n\n    plansShow.totalMiles = Math.floor(plansShow.totalMiles);\n    plansShow.completedMiles = Math.floor(plansShow.completedMiles);\n\n  });\n}\n\nPlansEditController.$inject = ['$state', 'UserPlan'];\nfunction PlansEditController($state, UserPlan) {\n  const plansEdit = this;\n\n  plansEdit.plan = UserPlan.get($state.params);\n\n  function endPlan() {\n    plansEdit.plan.active = false;\n    UserPlan.update($state.params,plansEdit.plan, () => {\n      $state.go('plansIndex');\n    });\n  }\n\n  function deletePlan() {\n    UserPlan.remove($state.params, () => {\n      $state.go('plansIndex');\n    });\n  }\n\n  plansEdit.endPlan = endPlan;\n  plansEdit.deletePlan = deletePlan;\n}\n\n\nPlansNewController.$inject = ['User', 'UserPlan', '$state'];\nfunction PlansNewController(User, UserPlan, $state) {\n  const plansNew = this;\n\n  User.get($state.params, (user) => {\n    plansNew.userPlans = user.user_plans;\n    plansNew.hasActivePlan = false;\n\n    plansNew.userPlans.forEach((plan) => {\n      if (plan.active === true) {\n        plansNew.hasActivePlan = true;\n        plansNew.activePlan = plan;\n      }\n    });\n\n    if (!plansNew.hasActivePlan){\n      $state.go('setup');\n    }\n  });\n\n  function endPlan(id) {\n    plansNew.activePlan.active = false;\n    UserPlan.update(id, plansNew.activePlan, () => {\n      $state.go('setup');\n    });\n  }\n  plansNew.endPlan = endPlan;\n}\n","angular.module('finalProject')\n  .config(Router);\n\nRouter.$inject = ['$stateProvider', '$urlRouterProvider'];\nfunction Router($stateProvider, $urlRouterProvider) {\n  $stateProvider\n    .state('homepage', {\n      url: '/',\n      templateUrl: '/templates/homepage.html',\n      controller: 'MainController as main'\n    })\n    .state('setup', {\n      url: '/setup',\n      templateUrl: '/templates/setup.html',\n      controller: 'SetupController as setupPlan'\n    })\n    .state('plansIndex', {\n      url: '/plans',\n      templateUrl: '/templates/plansIndex.html',\n      controller: 'PlansIndexController as plansIndex'\n    })\n    .state('plansShow', {\n      url: '/plans/:id',\n      templateUrl: '/templates/plansShow.html',\n      controller: 'PlansShowController as plansShow'\n    })\n    .state('plansEdit', {\n      url: '/plans/:id/end',\n      templateUrl: '/templates/plansEdit.html',\n      controller: 'PlansEditController as plansEdit'\n    })\n    .state('plansNew', {\n      url: '/:id/new',\n      templateUrl: '/templates/plansNew.html',\n      controller: 'PlansNewController as plansNew'\n    })\n    .state('weeksShow', {\n      url: '/plans/:planId/weeks/:weekId',\n      templateUrl: '/templates/weeksShow.html',\n      controller: 'WeeksShowController as weeksShow'\n    })\n    .state('weeksEdit', {\n      url: '/plans/:planId/weeks/:weekId/edit',\n      templateUrl: '/templates/weeksEdit.html',\n      controller: 'WeeksEditController as weeksEdit'\n    })\n    .state('daysIndex', {\n      url: '/plans/:id/days',\n      templateUrl: '/templates/daysIndex.html',\n      controller: 'DaysIndexController as daysIndex'\n    })\n    .state('daysShow', {\n      url: '/plans/:planId/days/:dayId?stravaId',\n      templateUrl: '/templates/daysShow.html',\n      controller: 'DaysShowController as daysShow'\n    })\n    .state('stravaIndex', {\n      url: '/strava',\n      templateUrl: '/templates/stravaIndex.html',\n      controller: 'StravaIndexController as stravaIndex'\n    })\n    .state('usersIndex', {\n      url: '/users',\n      templateUrl: '/templates/usersIndex.html',\n      controller: 'UsersIndexController as usersIndex'\n    })\n    .state('usersShow', {\n      url: '/users/:id',\n      templateUrl: '/templates/usersShow.html',\n      controller: 'UsersShowController as usersShow'\n    })\n    .state('usersEdit', {\n      url: '/users/:id/edit',\n      templateUrl: '/templates/usersEdit.html',\n      controller: 'UsersEditController as usersEdit'\n    })\n    .state('register', {\n      url: '/register',\n      templateUrl: '/templates/register.html',\n      controller: 'RegisterController as register'\n    })\n    .state('login', {\n      url: '/login',\n      templateUrl: '/templates/login.html',\n      controller: 'LoginController as login'\n    });\n\n  $urlRouterProvider.otherwise('/');\n}\n","angular.module('finalProject')\n  .controller('SetupController', SetupController);\n\nSetupController.$inject = ['UserPlan','$state'];\nfunction SetupController(UserPlan, $state) {\n  const setupPlan = this;\n\n  function create(){\n    UserPlan.save(setupPlan, () => {\n      $state.go('plansIndex');\n    });\n  }\n\n  setupPlan.create = create;\n}\n","angular.module('finalProject')\n  .controller('StravaIndexController', StravaIndexController);\n\nStravaIndexController.$inject = ['$http', 'StravaService','$auth', 'User','UserPlan','Day', '$window', '$state'];\nfunction StravaIndexController($http, StravaService, $auth, User, UserPlan, Day, $window, $state){\n  const stravaIndex = this;\n  const moment = $window.moment;\n  const userId = $auth.getPayload().id;\n\n  User.get({id: userId}, (res) => {\n    res.user_plans.forEach((plan) => {\n      if (plan.active) {\n        stravaIndex.userPlanId = plan.id;\n        UserPlan.get({id: plan.id }, (data) => {\n          stravaIndex.userDays = data.user_days;\n          data.user_days.forEach((day) => {\n            day.date = moment(day.date).format('YYYY-MM-DD');\n          });\n\n        });\n      }\n    });\n  });\n\n\n  // Get activities from Strava\n  const accessToken = $window.localStorage.getItem('strava_token');\n\n  StravaService\n    .getActivities(accessToken)\n    .then(\n      successResponse => {\n        stravaIndex.data = successResponse;\n      },\n      errorResponse => {\n        console.log(errorResponse);\n      }\n    );\n\n  function markComplete(planId, dayId, stravaId){\n\n    Day.get({id: dayId}, (res) => {\n      res.completed = true;\n      res.strava_id = stravaId;\n\n      Day.update(res, res, () => {\n        $state.go('daysShow', {planId: planId, dayId: dayId, stravaId: stravaId});\n      });\n    });\n  }\n\n  stravaIndex.markComplete = markComplete;\n}\n","angular.module('finalProject')\n  .service('StravaService', StravaService);\n\nStravaService.$inject = ['$http', '$window'];\nfunction StravaService($http, $window) {\n  const moment = $window.moment;\n\n  function getActivities(accessToken) {\n\n    return $http({\n      method: 'GET',\n      url: 'http://localhost:3000/api/strava',\n      params: {\n        accessToken\n      }\n    }).then(function successCallback(response) {\n      response.data.forEach((activity) => {\n        activity.start_date = moment(activity.start_date).format('YYYY-MM-DD');\n\n      });\n\n      return response.data;\n    }, function errorCallback(response) {\n      console.log(response);\n    });\n  }\n\n  function getActivity(accessToken, activityId) {\n\n    return $http({\n      method: 'GET',\n      url: 'http://localhost:3000/api/strava/activity',\n      params: {\n        activityId,\n        accessToken\n      }\n    }).then(function successCallback(response) {\n      response.data.distance = ((response.data.distance / 1000) * 0.621371).toFixed(1);\n\n      response.data.elapsed_minutes = Math.floor(response.data.elapsed_time / 60);\n      response.data.elapsed_seconds = ((response.data.elapsed_time % 60) * 60);\n\n\n      return response.data;\n    }, function errorCallback(response) {\n      console.log(response);\n    });\n  }\n\n  this.getActivities = getActivities;\n  this.getActivity = getActivity;\n}\n","angular.module('finalProject')\n  .factory('User', User);\n\nUser.$inject = ['$resource', 'API_URL'];\nfunction User($resource, API_URL) {\n  return new $resource(`${API_URL}/users/:id`, { id: '@id'}, {\n    update: { method: 'PUT'}\n  });\n}\n","angular.module('finalProject')\n  .factory('UserPlan', UserPlan);\n\nUserPlan.$inject = ['$resource', 'API_URL'];\nfunction UserPlan($resource, API_URL) {\n  return new $resource(`${API_URL}/user_plans/:id`, { id: '@id'}, {\n    update: { method: 'PUT'}\n  });\n}\n","angular.module('finalProject')\n  .controller('UsersIndexController', UsersIndexController)\n  .controller('UsersShowController', UsersShowController)\n  .controller('UsersEditController', UsersEditController);\n\nUsersIndexController.$inject = ['User'];\nfunction UsersIndexController(User) {\n  const usersIndex = this;\n\n  usersIndex.all = User.query();\n}\n\nUsersShowController.$inject = ['User', '$state','$auth', '$window'];\nfunction UsersShowController(User, $state, $auth, $window) {\n  const usersShow = this;\n  usersShow.user = User.get($state.params);\n\n  function userDelete() {\n    usersShow.user.$remove(() => {\n      $state.go('usersIndex');\n    });\n  }\n\n  function logout() {\n\n    $auth.logout()\n      .then(() => {\n        $window.localStorage.removeItem('strava_token');\n        $state.go('homepage');\n      });\n  }\n\n  function authenticateStrava() {\n    $auth.authenticate('strava')\n      .then((res) => {\n        $window.localStorage.setItem('strava_token', res.data.access_token);\n\n        usersShow.user.strava_id = res.data.athlete.id;\n\n        User.update(usersShow.user.id, usersShow.user, () => {\n          $state.go('stravaIndex');\n        });\n      });\n  }\n\n  usersShow.logout = logout;\n  usersShow.delete = userDelete;\n  usersShow.authenticateStrava = authenticateStrava;\n}\n\nUsersEditController.$inject = ['User', '$state'];\nfunction UsersEditController(User, $state) {\n  const usersEdit = this;\n\n  usersEdit.user = User.get($state.params);\n\n  function update() {\n    User.update(usersEdit.user.id, usersEdit.user, () => {\n      $state.go('usersShow', $state.params);\n    });\n  }\n\n  usersEdit.update = update;\n}\n","angular.module('finalProject')\n  .controller('WeeksShowController', WeeksShowController)\n  .controller('WeeksEditController', WeeksEditController);\n\nWeeksShowController.$inject = ['UserPlan', '$state'];\nfunction WeeksShowController(UserPlan, $state) {\n  const weeksShow = this;\n\n  weeksShow.planId = $state.params.planId;\n  weeksShow.weekId = $state.params.weekId;\n  weeksShow.totalWorkouts = 0;\n  weeksShow.completedWorkouts = 0;\n  weeksShow.totalMiles = 0;\n  weeksShow.completedMiles = 0;\n\n  UserPlan.get({ id: weeksShow.planId, week: weeksShow.weekId}, (week) => {\n    weeksShow.thisWeek = week.user_days;\n\n    weeksShow.thisWeek.forEach((day) => {\n      if (day.exercise) {\n        // Calculate total number of workout days\n        weeksShow.totalWorkouts += 1;\n        weeksShow.totalMiles += day.exercise.miles;\n\n        // Calculate num completed workouts\n        if (day.completed) {\n          weeksShow.completedWorkouts += 1;\n          weeksShow.completedMiles += day.exercise.miles;\n        }\n      }\n    });\n\n    weeksShow.totalMiles = Math.floor(weeksShow.totalMiles);\n    weeksShow.completedMiles = Math.floor(weeksShow.completedMiles);\n\n  });\n}\n\nWeeksEditController.$inject = ['UserPlan', '$state'];\nfunction WeeksEditController(UserPlan, $state) {\n  const weeksEdit = this;\n\n  weeksEdit.planId = $state.params.planId;\n  weeksEdit.weekId = $state.params.weekId;\n\n  UserPlan.get({ id: weeksEdit.planId, week: weeksEdit.weekId }, (plan) => {\n    weeksEdit.plan = plan;\n    weeksEdit.thisWeek = plan.user_days.sort(function(a,b) {\n      return a.position - b.position;\n    });\n    weeksEdit.startingDay = plan.user_days[0];\n  });\n\n  function updatePosition($index){\n    let index = weeksEdit.startingDay.position;\n    weeksEdit.thisWeek.splice($index, 1);\n    weeksEdit.thisWeek.forEach((day) => {\n      day.position = index;\n      index++;\n    });\n  }\n\n  function savePlan(){\n    UserPlan.update(weeksEdit.planId, weeksEdit.plan);\n  }\n\n  weeksEdit.updatePosition = updatePosition;\n  weeksEdit.savePlan = savePlan;\n}\n"]}